!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AIML_PROCESSOR_H	./src/AimlProcessor.h	7;"	d
AIML_WRITER_H	./src/AimlWriter.h	2;"	d
ARRAY	./src/PredicateEngine.h	/^} ARRAY;$/;"	t	typeref:struct:__anon2
AUTHENTICATE_PROCESSOR_H	./src/SecureProcessor.h	62;"	d
AdminConfig	./src/Config.h	/^} AdminConfig;$/;"	t	typeref:struct:__anon8
AimlProcessor	./src/AimlProcessor.h	/^class AimlProcessor$/;"	c
AimlProcessor::process	./src/AimlProcessor.h	/^    virtual string process(Match *, PElement, Responder *, const string &) = 0;$/;"	p	class:AimlProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
AimlProcessor::~AimlProcessor	./src/AimlProcessor.h	/^    virtual ~AimlProcessor() { };$/;"	f	class:AimlProcessor	access:public	signature:()
AimlWriter	./src/AimlWriter.h	/^class AimlWriter$/;"	c
AimlWriter::parse	./src/AimlWriter.cpp	/^string AimlWriter::parse(PElement tree, bool pretty, const string &rootName, bool addRoot)$/;"	f	class:AimlWriter	signature:(PElement tree, bool pretty, const string &rootName, bool addRoot)
AimlWriter::parse	./src/AimlWriter.h	/^    static string parse(PElement, bool pretty, const string &rootName = "", bool addRoot = false);$/;"	p	class:AimlWriter	access:public	signature:(PElement, bool pretty, const string &rootName = Ó, bool addRoot = false)
AimlWriter::prettyAiml	./src/AimlWriter.cpp	/^string AimlWriter::prettyAiml(PElement element)$/;"	f	class:AimlWriter	signature:(PElement element)
AimlWriter::prettyAiml	./src/AimlWriter.h	/^    static string prettyAiml(PElement);$/;"	p	class:AimlWriter	access:public	signature:(PElement)
AimlWriter::recurse	./src/AimlWriter.cpp	/^string AimlWriter::recurse(PElement element)$/;"	f	class:AimlWriter	signature:(PElement element)
AimlWriter::recurse	./src/AimlWriter.h	/^    static string recurse(PElement);$/;"	p	class:AimlWriter	access:public	signature:(PElement)
AuthenticateProcessor	./src/SecureProcessor.h	/^class AuthenticateProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
AuthenticateProcessor::process	./src/SecureProcessor.h	/^    string process(Match *, PElement, Responder *, const string &id)$/;"	f	class:AuthenticateProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
AuthenticateProcessor::~AuthenticateProcessor	./src/SecureProcessor.h	/^    ~AuthenticateProcessor() { }$/;"	f	class:AuthenticateProcessor	access:public	signature:()
AutoVersion	./version.h	/^namespace AutoVersion{$/;"	n
AutoVersion::BUILD	./version.h	/^	static const long BUILD = 409;$/;"	m	namespace:AutoVersion
AutoVersion::BUILDS_COUNT	./version.h	/^	static const long BUILDS_COUNT = 720;$/;"	m	namespace:AutoVersion
AutoVersion::BUILD_HISTORY	./version.h	/^	static const long BUILD_HISTORY = 9;$/;"	m	namespace:AutoVersion
AutoVersion::DATE	./version.h	/^	static const char DATE[] = "17";$/;"	m	namespace:AutoVersion
AutoVersion::FULLVERSION_STRING	./version.h	/^	static const char FULLVERSION_STRING[] = "1.4.409.2335";$/;"	m	namespace:AutoVersion
AutoVersion::MAJOR	./version.h	/^	static const long MAJOR = 1;$/;"	m	namespace:AutoVersion
AutoVersion::MINOR	./version.h	/^	static const long MINOR = 4;$/;"	m	namespace:AutoVersion
AutoVersion::MONTH	./version.h	/^	static const char MONTH[] = "01";$/;"	m	namespace:AutoVersion
AutoVersion::REVISION	./version.h	/^	static const long REVISION = 2335;$/;"	m	namespace:AutoVersion
AutoVersion::STATUS	./version.h	/^	static const char STATUS[] = "Alpha";$/;"	m	namespace:AutoVersion
AutoVersion::STATUS_SHORT	./version.h	/^	static const char STATUS_SHORT[] = "a";$/;"	m	namespace:AutoVersion
AutoVersion::UBUNTU_VERSION_STYLE	./version.h	/^	static const char UBUNTU_VERSION_STYLE[] = "15.01";$/;"	m	namespace:AutoVersion
AutoVersion::YEAR	./version.h	/^	static const char YEAR[] = "2015";$/;"	m	namespace:AutoVersion
BOT_PROCESSOR_H	./src/BotProcessor.h	7;"	d
BR_PROCESSOR_H	./src/BrProcessor.h	7;"	d
BUFSIZE	./src/SystemProcessor.h	24;"	d
BUILD	./version.h	/^	static const long BUILD = 409;$/;"	m	namespace:AutoVersion
BUILDS_COUNT	./version.h	/^	static const long BUILDS_COUNT = 720;$/;"	m	namespace:AutoVersion
BUILD_HISTORY	./version.h	/^	static const long BUILD_HISTORY = 9;$/;"	m	namespace:AutoVersion
BotProcessor	./src/BotProcessor.h	/^class BotProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
BotProcessor::process	./src/BotProcessor.h	/^    string process(Match *, PElement e, Responder *, const string &id)$/;"	f	class:BotProcessor	access:public	signature:(Match *, PElement e, Responder *, const string &id)
BotProcessor::~BotProcessor	./src/BotProcessor.h	/^    ~BotProcessor() { }$/;"	f	class:BotProcessor	access:public	signature:()
BrProcessor	./src/BrProcessor.h	/^class BrProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
BrProcessor::process	./src/BrProcessor.h	/^    string process(Match *, PElement, Responder *, const string &)$/;"	f	class:BrProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
BrProcessor::~BrProcessor	./src/BrProcessor.h	/^    ~BrProcessor() { }$/;"	f	class:BrProcessor	access:public	signature:()
COMPAT_H	./src/Compat.h	2;"	d
CONDITION_PROCESSOR_H	./src/ConditionProcessor.h	10;"	d
CONFIG_H	./src/Config.h	2;"	d
CONTEXT	./src/Kernel.cpp	/^const int Kernel::CONTEXT = 1;$/;"	m	class:Kernel	file:
CONTEXT	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
Clone	./src/wxwindows.h	/^    virtual wxEvent *Clone() const$/;"	f	class:NewTabEvent	access:public	signature:() const
Clone	./src/wxwindows.h	/^    virtual wxEvent *Clone() const$/;"	f	class:UpdateTabEvent	access:public	signature:() const
ConditionProcessor	./src/ConditionProcessor.h	/^class ConditionProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
ConditionProcessor::process	./src/ConditionProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ConditionProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
ConditionProcessor::~ConditionProcessor	./src/ConditionProcessor.h	/^    ~ConditionProcessor() { }$/;"	f	class:ConditionProcessor	access:public	signature:()
DATE	./version.h	/^	static const char DATE[] = "17";$/;"	m	namespace:AutoVersion
DEBUG	./src/Logger.h	/^    static const int DEBUG;$/;"	m	class:Logger	access:public
ELEMENT_H	./src/Element.h	10;"	d
EWOULDBLOCK	./src/Socket.cpp	63;"	d	file:
Element	./src/Element.cpp	/^Element::Element(const string &name = ""):text(""),tname(""),nspace("")$/;"	f	class:Element	signature:(const string &name = Ó)
Element	./src/Element.h	/^    Element(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
Element	./src/Element.h	/^class Element$/;"	c
Element::Element	./src/Element.cpp	/^Element::Element(const string &name = ""):text(""),tname(""),nspace("")$/;"	f	class:Element	signature:(const string &name = Ó)
Element::Element	./src/Element.h	/^    Element(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
Element::addChild	./src/Element.cpp	/^void Element::addChild(PElement element)$/;"	f	class:Element	signature:(PElement element)
Element::addChild	./src/Element.h	/^    void addChild(PElement);$/;"	p	class:Element	access:public	signature:(PElement)
Element::attributes	./src/Element.h	/^    map<string, string> attributes;$/;"	m	class:Element	access:private
Element::child	./src/Element.h	/^    PElement child, next, last;$/;"	m	class:Element	access:private
Element::getAttribute	./src/Element.cpp	/^string Element::getAttribute(const string &key) const$/;"	f	class:Element	signature:(const string &key) const
Element::getAttribute	./src/Element.h	/^    string getAttribute(const string &) const;$/;"	p	class:Element	access:public	signature:(const string &) const
Element::getAttributes	./src/Element.cpp	/^map<string, string> Element::getAttributes() const$/;"	f	class:Element	signature:() const
Element::getAttributes	./src/Element.h	/^    map<string, string> getAttributes() const;$/;"	p	class:Element	access:public	signature:() const
Element::getChild	./src/Element.cpp	/^PElement Element::getChild() const$/;"	f	class:Element	signature:() const
Element::getChild	./src/Element.cpp	/^PElement Element::getChild(const string &tagname) const$/;"	f	class:Element	signature:(const string &tagname) const
Element::getChild	./src/Element.h	/^    PElement getChild() const;$/;"	p	class:Element	access:public	signature:() const
Element::getChild	./src/Element.h	/^    PElement getChild(const string &) const;$/;"	p	class:Element	access:public	signature:(const string &) const
Element::getChildren	./src/Element.cpp	/^void Element::getChildren(const string &tagname, velement *ve)$/;"	f	class:Element	signature:(const string &tagname, velement *ve)
Element::getChildren	./src/Element.cpp	/^void Element::getChildren(velement *ve)$/;"	f	class:Element	signature:(velement *ve)
Element::getChildren	./src/Element.h	/^    void getChildren(const string &, velement *);$/;"	p	class:Element	access:public	signature:(const string &, velement *)
Element::getChildren	./src/Element.h	/^    void getChildren(velement *);$/;"	p	class:Element	access:public	signature:(velement *)
Element::getNamespace	./src/Element.cpp	/^string Element::getNamespace() const$/;"	f	class:Element	signature:() const
Element::getNamespace	./src/Element.h	/^    string getNamespace() const;$/;"	p	class:Element	access:public	signature:() const
Element::getNextSibling	./src/Element.cpp	/^PElement Element::getNextSibling() const$/;"	f	class:Element	signature:() const
Element::getNextSibling	./src/Element.h	/^    PElement getNextSibling() const;$/;"	p	class:Element	access:public	signature:() const
Element::getTagname	./src/Element.cpp	/^string Element::getTagname() const$/;"	f	class:Element	signature:() const
Element::getTagname	./src/Element.h	/^    string getTagname() const;$/;"	p	class:Element	access:public	signature:() const
Element::getText	./src/Element.cpp	/^string Element::getText(bool resolve) const$/;"	f	class:Element	signature:(bool resolve) const
Element::getText	./src/Element.h	/^    string getText(bool resolve = true) const;$/;"	p	class:Element	access:public	signature:(bool resolve = true) const
Element::hasAttributes	./src/Element.cpp	/^bool Element::hasAttributes() const$/;"	f	class:Element	signature:() const
Element::hasAttributes	./src/Element.h	/^    bool hasAttributes() const;$/;"	p	class:Element	access:public	signature:() const
Element::hasChildren	./src/Element.cpp	/^bool Element::hasChildren() const$/;"	f	class:Element	signature:() const
Element::hasChildren	./src/Element.h	/^    bool hasChildren() const;$/;"	p	class:Element	access:public	signature:() const
Element::hasNamespace	./src/Element.cpp	/^bool Element::hasNamespace() const$/;"	f	class:Element	signature:() const
Element::hasNamespace	./src/Element.h	/^    bool hasNamespace() const;$/;"	p	class:Element	access:public	signature:() const
Element::last	./src/Element.h	/^    PElement child, next, last;$/;"	m	class:Element	access:private
Element::next	./src/Element.h	/^    PElement child, next, last;$/;"	m	class:Element	access:private
Element::nspace	./src/Element.h	/^    char *tname, *nspace;$/;"	m	class:Element	access:private
Element::resolveEntities	./src/Element.cpp	/^string Element::resolveEntities(const string &input)$/;"	f	class:Element	signature:(const string &input)
Element::resolveEntities	./src/Element.h	/^    static string resolveEntities(const string &);$/;"	p	class:Element	access:private	signature:(const string &)
Element::setAttribute	./src/Element.cpp	/^void Element::setAttribute(const string &key, const string &value)$/;"	f	class:Element	signature:(const string &key, const string &value)
Element::setAttribute	./src/Element.h	/^    void setAttribute(const string &, const string &);$/;"	p	class:Element	access:public	signature:(const string &, const string &)
Element::setName	./src/Element.cpp	/^void Element::setName(const string &str)$/;"	f	class:Element	signature:(const string &str)
Element::setName	./src/Element.h	/^    void setName(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
Element::setNamespace	./src/Element.cpp	/^void Element::setNamespace(const string &str)$/;"	f	class:Element	signature:(const string &str)
Element::setNamespace	./src/Element.h	/^    void setNamespace(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
Element::setTagname	./src/Element.cpp	/^void Element::setTagname(const string &str)$/;"	f	class:Element	signature:(const string &str)
Element::setTagname	./src/Element.h	/^    void setTagname(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
Element::setText	./src/Element.cpp	/^void Element::setText(const string &str)$/;"	f	class:Element	signature:(const string &str)
Element::setText	./src/Element.h	/^    void setText(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
Element::text	./src/Element.h	/^    string text;$/;"	m	class:Element	access:private
Element::tname	./src/Element.h	/^    char *tname, *nspace;$/;"	m	class:Element	access:private
Element::~Element	./src/Element.cpp	/^Element::~Element()$/;"	f	class:Element	signature:()
Element::~Element	./src/Element.h	/^    ~Element();$/;"	p	class:Element	access:public	signature:()
Entry	./src/wxwindows.cpp	/^void *JThread::Entry()$/;"	f	class:JThread	signature:()
Entry	./src/wxwindows.h	/^    virtual void *Entry();$/;"	p	class:JThread	access:public	signature:()
Event	./src/TimeKeeper.h	/^class Event$/;"	c
Event::run	./src/TimeKeeper.h	/^    virtual void run() = 0;$/;"	p	class:Event	access:public	signature:()
Event::~Event	./src/TimeKeeper.h	/^    virtual ~Event() { }$/;"	f	class:Event	access:public	signature:()
ExplodeProcessor	./src/ImpExpProcessor.h	/^class ExplodeProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
ExplodeProcessor::process	./src/ImpExpProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ExplodeProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
FANCY_COMPILER	./src/Utils.cpp	17;"	d	file:
FLASH_RESPONDER_H	./src/FlashResponder.h	10;"	d
FORMAL_PROCESSOR_H	./src/FormalProcessor.h	7;"	d
FULLVERSION_STRING	./version.h	/^	static const char FULLVERSION_STRING[] = "1.4.409.2335";$/;"	m	namespace:AutoVersion
FlashResponder	./src/FlashResponder.cpp	/^FlashResponder::FlashResponder()$/;"	f	class:FlashResponder	signature:()
FlashResponder	./src/FlashResponder.h	/^    FlashResponder();$/;"	p	class:FlashResponder	access:public	signature:()
FlashResponder	./src/FlashResponder.h	/^class FlashResponder : public Responder$/;"	c	inherits:Responder
FlashResponder::FlashResponder	./src/FlashResponder.cpp	/^FlashResponder::FlashResponder()$/;"	f	class:FlashResponder	signature:()
FlashResponder::FlashResponder	./src/FlashResponder.h	/^    FlashResponder();$/;"	p	class:FlashResponder	access:public	signature:()
FlashResponder::respond	./src/FlashResponder.cpp	/^string FlashResponder::respond(Match *, PElement, const string &)$/;"	f	class:FlashResponder	signature:(Match *, PElement, const string &)
FlashResponder::respond	./src/FlashResponder.h	/^    string respond(Match *, PElement, const string &);$/;"	p	class:FlashResponder	access:public	signature:(Match *, PElement, const string &)
FormalProcessor	./src/FormalProcessor.h	/^class FormalProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
FormalProcessor::process	./src/FormalProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:FormalProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
FormalProcessor::~FormalProcessor	./src/FormalProcessor.h	/^    ~FormalProcessor() { }$/;"	f	class:FormalProcessor	access:public	signature:()
GET_PROCESSOR_H	./src/GetProcessor.h	7;"	d
GenderProcessor	./src/PersonProcessor.h	/^class GenderProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
GenderProcessor::getName	./src/PersonProcessor.h	/^    string getName() const$/;"	f	class:GenderProcessor	access:public	signature:() const
GenderProcessor::getVersion	./src/PersonProcessor.h	/^    string getVersion() const$/;"	f	class:GenderProcessor	access:public	signature:() const
GenderProcessor::process	./src/PersonProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:GenderProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
GenderProcessor::~GenderProcessor	./src/PersonProcessor.h	/^    ~GenderProcessor() { }$/;"	f	class:GenderProcessor	access:public	signature:()
GetProcessor	./src/GetProcessor.h	/^class GetProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
GetProcessor::process	./src/GetProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:GetProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
GetProcessor::~GetProcessor	./src/GetProcessor.h	/^    ~GetProcessor() { }$/;"	f	class:GetProcessor	access:public	signature:()
GuiStream	./src/wxwindows.h	/^    GuiStream()$/;"	f	class:GuiStream	access:public	signature:()
GuiStream	./src/wxwindows.h	/^class GuiStream : public Stream$/;"	c	inherits:Stream
GuiStream::GuiStream	./src/wxwindows.h	/^    GuiStream()$/;"	f	class:GuiStream	access:public	signature:()
GuiStream::Read	./src/wxwindows.h	/^    void Read(const char *cs)$/;"	f	class:GuiStream	access:public	signature:(const char *cs)
GuiStream::Write	./src/wxwindows.h	/^    void Write(const char *cs)$/;"	f	class:GuiStream	access:public	signature:(const char *cs)
GuiStream::name	./src/wxwindows.h	/^    string name;$/;"	m	class:GuiStream	access:private
GuiStream::setName	./src/wxwindows.h	/^    void setName(const string &s)$/;"	f	class:GuiStream	access:public	signature:(const string &s)
GuiStream::setThread	./src/wxwindows.h	/^    void setThread(wxThread *t)$/;"	f	class:GuiStream	access:public	signature:(wxThread *t)
GuiStream::thread	./src/wxwindows.h	/^    wxThread *thread;$/;"	m	class:GuiStream	access:private
HANDLER_H	./src/Handler.h	7;"	d
HISTORY	./src/PredicateEngine.h	/^} HISTORY;$/;"	t	typeref:struct:__anon1
HISTORY_SIZE	./src/PredicateEngine.h	36;"	d
HTTPListener	./src/HTTPProcessor.cpp	/^    HTTPListener(Socket *s)$/;"	f	class:HTTPListener	access:public	signature:(Socket *s)
HTTPListener	./src/HTTPProcessor.cpp	/^class HTTPListener : public SocketListener, Responder$/;"	c	file:	inherits:SocketListener,Responder
HTTPListener::HTTPListener	./src/HTTPProcessor.cpp	/^    HTTPListener(Socket *s)$/;"	f	class:HTTPListener	access:public	signature:(Socket *s)
HTTPListener::client	./src/HTTPProcessor.cpp	/^    Socket *client;$/;"	m	class:HTTPListener	file:	access:private
HTTPListener::connected	./src/HTTPProcessor.cpp	/^    void connected()$/;"	f	class:HTTPListener	access:public	signature:()
HTTPListener::disconnected	./src/HTTPProcessor.cpp	/^    void disconnected(const string &)$/;"	f	class:HTTPListener	access:public	signature:(const string &)
HTTPListener::getSocket	./src/HTTPProcessor.cpp	/^    Socket *getSocket()$/;"	f	class:HTTPListener	access:public	signature:()
HTTPListener::numClients	./src/HTTPProcessor.cpp	/^    static int numClients;$/;"	m	class:HTTPListener	file:	access:private
HTTPListener::numClients	./src/HTTPProcessor.cpp	/^int HTTPListener::numClients = 0;$/;"	m	class:HTTPListener	file:
HTTPListener::recv	./src/HTTPProcessor.cpp	/^    void recv(string &s);$/;"	p	class:HTTPListener	file:	access:public	signature:(string &s)
HTTPListener::recv	./src/HTTPProcessor.cpp	/^void HTTPListener::recv(string &s)$/;"	f	class:HTTPListener	signature:(string &s)
HTTPListener::respond	./src/HTTPProcessor.cpp	/^    string respond(Match *, PElement e, const string &)$/;"	f	class:HTTPListener	access:public	signature:(Match *, PElement e, const string &)
HTTPListener::uid	./src/HTTPProcessor.cpp	/^    string uid;$/;"	m	class:HTTPListener	file:	access:private
HTTPListener::~HTTPListener	./src/HTTPProcessor.cpp	/^    virtual ~HTTPListener()$/;"	f	class:HTTPListener	access:public	signature:()
HTTPPRCCESSOR_H	./src/HTTPProcessor.h	2;"	d
HTTPProcessor	./src/HTTPProcessor.h	/^class HTTPProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
HTTPProcessor::process	./src/HTTPProcessor.cpp	/^string HTTPProcessor::process(Match *, PElement, Responder *, const string &)$/;"	f	class:HTTPProcessor	signature:(Match *, PElement, Responder *, const string &)
HTTPProcessor::process	./src/HTTPProcessor.h	/^    string process(Match *, PElement, Responder *, const string &);$/;"	p	class:HTTPProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
HTTPServer	./src/HTTPProcessor.cpp	/^HTTPServer::HTTPServer()$/;"	f	class:HTTPServer	signature:()
HTTPServer	./src/HTTPProcessor.h	/^    HTTPServer();$/;"	p	class:HTTPServer	access:public	signature:()
HTTPServer	./src/HTTPProcessor.h	/^class HTTPServer : ServerSocketListener$/;"	c	inherits:ServerSocketListener
HTTPServer::HTTPServer	./src/HTTPProcessor.cpp	/^HTTPServer::HTTPServer()$/;"	f	class:HTTPServer	signature:()
HTTPServer::HTTPServer	./src/HTTPProcessor.h	/^    HTTPServer();$/;"	p	class:HTTPServer	access:public	signature:()
HTTPServer::awaitingClient	./src/HTTPProcessor.cpp	/^void HTTPServer::awaitingClient(Socket* socket)$/;"	f	class:HTTPServer	signature:(Socket* socket)
HTTPServer::awaitingClient	./src/HTTPProcessor.h	/^    void awaitingClient(Socket *);$/;"	p	class:HTTPServer	access:public	signature:(Socket *)
HTTPServer::server	./src/HTTPProcessor.h	/^    ServerSocket *server;$/;"	m	class:HTTPServer	access:private
HTTPServer::shutdown	./src/HTTPProcessor.cpp	/^void HTTPServer::shutdown(const string &msg)$/;"	f	class:HTTPServer	signature:(const string &msg)
HTTPServer::shutdown	./src/HTTPProcessor.h	/^    void shutdown(const string &);$/;"	p	class:HTTPServer	access:public	signature:(const string &)
HTTPServer::~HTTPServer	./src/HTTPProcessor.h	/^    virtual ~HTTPServer() { }$/;"	f	class:HTTPServer	access:public	signature:()
Handler	./src/Handler.h	/^class Handler$/;"	c
Handler::hasProcessor	./src/Handler.cpp	/^bool Handler::hasProcessor(const string &name)$/;"	f	class:Handler	signature:(const string &name)
Handler::hasProcessor	./src/Handler.h	/^    static bool hasProcessor(const string &name);$/;"	p	class:Handler	access:public	signature:(const string &name)
Handler::init	./src/Handler.cpp	/^void Handler::init()$/;"	f	class:Handler	signature:()
Handler::init	./src/Handler.h	/^    static void init();$/;"	p	class:Handler	access:public	signature:()
Handler::processors	./src/Handler.cpp	/^map<string, AimlProcessor *> Handler::processors;$/;"	m	class:Handler	file:
Handler::processors	./src/Handler.h	/^    static map<string, AimlProcessor *> processors;$/;"	m	class:Handler	access:public
Holder	./src/Pointer.h	/^        Holder(T *t) : datum(t), count(1)$/;"	f	class:Pointer::Holder	access:public	signature:(T *t)
Holder	./src/Pointer.h	/^    class Holder$/;"	c	class:Pointer	access:protected
HttpConfig	./src/Config.h	/^} HttpConfig;$/;"	t	typeref:struct:__anon6
ID_PROCESSOR_H	./src/IdProcessor.h	7;"	d
IMP_EXP_PROCESSOR_H	./src/ImpExpProcessor.h	2;"	d
INPUT	./src/Kernel.cpp	/^const int Kernel::INPUT = 2;$/;"	m	class:Kernel	file:
INPUT	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
INPUT_PROCESSOR_H	./src/InputProcessor.h	10;"	d
IdProcessor	./src/IdProcessor.h	/^class IdProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
IdProcessor::process	./src/IdProcessor.h	/^    string process(Match *, PElement, Responder *, const string &id)$/;"	f	class:IdProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
IdProcessor::~IdProcessor	./src/IdProcessor.h	/^    ~IdProcessor() { }$/;"	f	class:IdProcessor	access:public	signature:()
ImplodeProcessor	./src/ImpExpProcessor.h	/^class ImplodeProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
ImplodeProcessor::process	./src/ImpExpProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ImplodeProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
InputProcessor	./src/InputProcessor.h	/^class InputProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
InputProcessor::process	./src/InputProcessor.h	/^    string process(Match *, PElement e, Responder *, const string &id)$/;"	f	class:InputProcessor	access:public	signature:(Match *, PElement e, Responder *, const string &id)
InputProcessor::~InputProcessor	./src/InputProcessor.h	/^    ~InputProcessor() { }$/;"	f	class:InputProcessor	access:public	signature:()
IrcConfig	./src/Config.h	/^} IrcConfig;$/;"	t	typeref:struct:__anon5
JAVA_SCRIPT_PROCESSOR_H	./src/JavaScriptProcessor.h	18;"	d
JFrame	./src/wxwindows.cpp	/^JFrame::JFrame(wxWindow *parent)$/;"	f	class:JFrame	signature:(wxWindow *parent)
JFrame	./src/wxwindows.h	/^    JFrame(wxWindow *parent = NULL);$/;"	p	class:JFrame	access:public	signature:(wxWindow *parent = NULL)
JFrame	./src/wxwindows.h	/^class JFrame : public wxFrame$/;"	c	inherits:wxFrame
JFrame::JFrame	./src/wxwindows.cpp	/^JFrame::JFrame(wxWindow *parent)$/;"	f	class:JFrame	signature:(wxWindow *parent)
JFrame::JFrame	./src/wxwindows.h	/^    JFrame(wxWindow *parent = NULL);$/;"	p	class:JFrame	access:public	signature:(wxWindow *parent = NULL)
JFrame::WXUNUSED	./src/wxwindows.cpp	/^void JFrame::OnAbout(wxCommandEvent& WXUNUSED(event))$/;"	f	class:JFrame	signature:(event)
JFrame::WXUNUSED	./src/wxwindows.cpp	/^void JFrame::OnExit(wxCommandEvent& WXUNUSED(event))$/;"	f	class:JFrame	signature:(event)
JFrame::WXUNUSED	./src/wxwindows.h	/^    void OnAbout(wxCommandEvent& WXUNUSED(event));$/;"	p	class:JFrame	access:public	signature:(event)
JFrame::WXUNUSED	./src/wxwindows.h	/^    void OnExit(wxCommandEvent& WXUNUSED(event));$/;"	p	class:JFrame	access:public	signature:(event)
JFrame::addTabbedPane	./src/wxwindows.cpp	/^void JFrame::addTabbedPane(wxEvent &evt)$/;"	f	class:JFrame	signature:(wxEvent &evt)
JFrame::addTabbedPane	./src/wxwindows.h	/^    void addTabbedPane(wxEvent &evt);$/;"	p	class:JFrame	access:public	signature:(wxEvent &evt)
JFrame::appendText	./src/wxwindows.cpp	/^void JFrame::appendText(wxEvent &evt)$/;"	f	class:JFrame	signature:(wxEvent &evt)
JFrame::appendText	./src/wxwindows.h	/^    void appendText(wxEvent &evt);$/;"	p	class:JFrame	access:public	signature:(wxEvent &evt)
JFrame::controls	./src/wxwindows.h	/^    map<string, wxTextCtrl *> controls;$/;"	m	class:JFrame	access:private
JFrame::init	./src/wxwindows.h	/^    bool init;$/;"	m	class:JFrame	access:private
JFrame::loadedOk	./src/wxwindows.h	/^    bool loadedOk()$/;"	f	class:JFrame	access:public	signature:()
JFrame::onClose	./src/wxwindows.cpp	/^void JFrame::onClose(wxCloseEvent &)$/;"	f	class:JFrame	signature:(wxCloseEvent &)
JFrame::onClose	./src/wxwindows.h	/^    void onClose(wxCloseEvent &);$/;"	p	class:JFrame	access:public	signature:(wxCloseEvent &)
JSP_Vars	./src/JavaScriptProcessor.h	/^} JSP_Vars;$/;"	v	typeref:struct:__anon4
JThread	./src/wxwindows.h	/^    JThread() : wxThread() { }$/;"	f	class:JThread	access:public	signature:()
JThread	./src/wxwindows.h	/^class JThread : public wxThread, public StreamProvider$/;"	c	inherits:wxThread,StreamProvider
JThread::Entry	./src/wxwindows.cpp	/^void *JThread::Entry()$/;"	f	class:JThread	signature:()
JThread::Entry	./src/wxwindows.h	/^    virtual void *Entry();$/;"	p	class:JThread	access:public	signature:()
JThread::JThread	./src/wxwindows.h	/^    JThread() : wxThread() { }$/;"	f	class:JThread	access:public	signature:()
JThread::Output	./src/wxwindows.cpp	/^void JThread::Output(const char *csn, const char *csm, bool read)$/;"	f	class:JThread	signature:(const char *csn, const char *csm, bool read)
JThread::Output	./src/wxwindows.h	/^    void Output(const char *csn, const char *csm, bool read);$/;"	p	class:JThread	access:public	signature:(const char *csn, const char *csm, bool read)
JThread::getStream	./src/wxwindows.cpp	/^Stream *JThread::getStream(const char *cs)$/;"	f	class:JThread	signature:(const char *cs)
JThread::getStream	./src/wxwindows.h	/^    Stream *getStream(const char *cs);$/;"	p	class:JThread	access:public	signature:(const char *cs)
JThread::streams	./src/wxwindows.h	/^    map<string, GuiStream *> streams;$/;"	m	class:JThread	access:private
JavaScriptProcessor	./src/JavaScriptProcessor.h	/^    JavaScriptProcessor()$/;"	f	class:JavaScriptProcessor	access:public	signature:()
JavaScriptProcessor	./src/JavaScriptProcessor.h	/^class JavaScriptProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
JavaScriptProcessor::JavaScriptProcessor	./src/JavaScriptProcessor.h	/^    JavaScriptProcessor()$/;"	f	class:JavaScriptProcessor	access:public	signature:()
JavaScriptProcessor::botObject	./src/JavaScriptProcessor.h	/^    JSObject *botObject;$/;"	m	class:JavaScriptProcessor	access:private
JavaScriptProcessor::builtinObjects	./src/JavaScriptProcessor.h	/^    JSBool builtinObjects;$/;"	m	class:JavaScriptProcessor	access:private
JavaScriptProcessor::context	./src/JavaScriptProcessor.h	/^    JSContext *context;$/;"	m	class:JavaScriptProcessor	access:private
JavaScriptProcessor::globalObject	./src/JavaScriptProcessor.h	/^    JSObject *globalObject;$/;"	m	class:JavaScriptProcessor	access:private
JavaScriptProcessor::initialised	./src/JavaScriptProcessor.h	/^    bool initialised;$/;"	m	class:JavaScriptProcessor	access:private
JavaScriptProcessor::process	./src/JavaScriptProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:JavaScriptProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
JavaScriptProcessor::runtime	./src/JavaScriptProcessor.h	/^    JSRuntime *runtime;$/;"	m	class:JavaScriptProcessor	access:private
JavaScriptProcessor::~JavaScriptProcessor	./src/JavaScriptProcessor.h	/^    ~JavaScriptProcessor()$/;"	f	class:JavaScriptProcessor	access:public	signature:()
KERNEL_H	./src/Kernel.h	7;"	d
Kernel	./src/Kernel.cpp	/^Kernel::Kernel()$/;"	f	class:Kernel	signature:()
Kernel	./src/Kernel.h	/^    Kernel();$/;"	p	class:Kernel	access:public	signature:()
Kernel	./src/Kernel.h	/^class Kernel$/;"	c
Kernel::CONTEXT	./src/Kernel.cpp	/^const int Kernel::CONTEXT = 1;$/;"	m	class:Kernel	file:
Kernel::CONTEXT	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
Kernel::INPUT	./src/Kernel.cpp	/^const int Kernel::INPUT = 2;$/;"	m	class:Kernel	file:
Kernel::INPUT	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
Kernel::Kernel	./src/Kernel.cpp	/^Kernel::Kernel()$/;"	f	class:Kernel	signature:()
Kernel::Kernel	./src/Kernel.h	/^    Kernel();$/;"	p	class:Kernel	access:public	signature:()
Kernel::THAT	./src/Kernel.cpp	/^const int Kernel::THAT = 3;$/;"	m	class:Kernel	file:
Kernel::THAT	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
Kernel::TOPIC	./src/Kernel.cpp	/^const int Kernel::TOPIC = 4;$/;"	m	class:Kernel	file:
Kernel::TOPIC	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
Kernel::add	./src/Kernel.cpp	/^Nodemaster *Kernel::add(const string &context, const string &pattern, const string &that, const string &topic)$/;"	f	class:Kernel	signature:(const string &context, const string &pattern, const string &that, const string &topic)
Kernel::add	./src/Kernel.h	/^    static Nodemaster * add(const string &context, const string &pattern, const string &that, const string &topic);$/;"	p	class:Kernel	access:public	signature:(const string &context, const string &pattern, const string &that, const string &topic)
Kernel::addPath	./src/Kernel.cpp	/^void Kernel::addPath(Match *m, const string &value, int state)$/;"	f	class:Kernel	signature:(Match *m, const string &value, int state)
Kernel::addPath	./src/Kernel.h	/^    static void addPath(Match *, const string &, int);$/;"	p	class:Kernel	access:private	signature:(Match *, const string &, int)
Kernel::addStar	./src/Kernel.cpp	/^void Kernel::addStar(Match *m, const string &value, int state)$/;"	f	class:Kernel	signature:(Match *m, const string &value, int state)
Kernel::addStar	./src/Kernel.h	/^    static void addStar(Match *, const string &, int);$/;"	p	class:Kernel	access:private	signature:(Match *, const string &, int)
Kernel::bootstrap	./src/Kernel.cpp	/^string Kernel::bootstrap()$/;"	f	class:Kernel	signature:()
Kernel::bootstrap	./src/Kernel.h	/^    static string bootstrap();$/;"	p	class:Kernel	access:public	signature:()
Kernel::constants	./src/Kernel.cpp	/^const string Kernel::constants = " <pattern> <that> <topic> ";$/;"	m	class:Kernel	file:
Kernel::constants	./src/Kernel.h	/^    static const string constants;$/;"	m	class:Kernel	access:private
Kernel::convertTempAiml	./src/Kernel.cpp	/^void Kernel::convertTempAiml()$/;"	f	class:Kernel	signature:()
Kernel::convertTempAiml	./src/Kernel.h	/^    static void convertTempAiml();$/;"	p	class:Kernel	access:public	signature:()
Kernel::load	./src/Kernel.cpp	/^bool Kernel::load(const string &file)$/;"	f	class:Kernel	signature:(const string &file)
Kernel::load	./src/Kernel.h	/^    static bool load(const string &file);$/;"	p	class:Kernel	access:public	signature:(const string &file)
Kernel::load10	./src/Kernel.h	/^    static void load10(const string &file, PElement &root);$/;"	p	class:Kernel	access:public	signature:(const string &file, PElement &root)
Kernel::loadSubstitutions	./src/Kernel.cpp	/^void Kernel::loadSubstitutions()$/;"	f	class:Kernel	signature:()
Kernel::loadSubstitutions	./src/Kernel.h	/^    static void loadSubstitutions();$/;"	p	class:Kernel	access:public	signature:()
Kernel::loadTemporaryData	./src/Kernel.cpp	/^void Kernel::loadTemporaryData()$/;"	f	class:Kernel	signature:()
Kernel::loadTemporaryData	./src/Kernel.h	/^    static void loadTemporaryData();$/;"	p	class:Kernel	access:private	signature:()
Kernel::lookup	./src/Kernel.cpp	/^bool Kernel::lookup(const string &, const string &)$/;"	f	class:Kernel	signature:(const string &, const string &)
Kernel::lookup	./src/Kernel.h	/^    static bool lookup(const string &, const string &);$/;"	p	class:Kernel	access:private	signature:(const string &, const string &)
Kernel::match	./src/Kernel.cpp	/^Match *Kernel::match(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path)$/;"	f	class:Kernel	signature:(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path)
Kernel::match	./src/Kernel.cpp	/^Match *Kernel::match(const string &context, const string &input, const string &that, const string &topic)$/;"	f	class:Kernel	signature:(const string &context, const string &input, const string &that, const string &topic)
Kernel::match	./src/Kernel.h	/^    static Match *match(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path);$/;"	p	class:Kernel	access:public	signature:(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path)
Kernel::match	./src/Kernel.h	/^    static Match *match(const string &context, const string &input, const string &that, const string &topic);$/;"	p	class:Kernel	access:public	signature:(const string &context, const string &input, const string &that, const string &topic)
Kernel::predicates	./src/Kernel.cpp	/^PredicateEngine *Kernel::predicates = new PredicateEngine();$/;"	m	class:Kernel	file:
Kernel::predicates	./src/Kernel.h	/^    static PredicateEngine *predicates;$/;"	m	class:Kernel	access:public
Kernel::process	./src/Kernel.cpp	/^string Kernel::process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:Kernel	signature:(Match *m, PElement e, Responder *r, const string &id)
Kernel::process	./src/Kernel.h	/^    static string process(Match *m, PElement e, Responder *, const string &id);$/;"	p	class:Kernel	access:public	signature:(Match *m, PElement e, Responder *, const string &id)
Kernel::respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, Responder *r, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, Responder *r, bool srai, const string &prefix)
Kernel::respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, Responder *r, int, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, Responder *r, int, bool srai, const string &prefix)
Kernel::respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, bool srai, const string &prefix)
Kernel::respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, const string &prefix)
Kernel::respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, int depth, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, int depth, bool srai, const string &prefix)
Kernel::respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, Responder *, bool srai = false, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, Responder *, bool srai = false, const string &prefix = Ó)
Kernel::respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, Responder *, int depth, bool srai, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, Responder *, int depth, bool srai, const string &prefix = Ó)
Kernel::respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, bool srai, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, bool srai, const string &prefix = Ó)
Kernel::respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, const string &prefix = Ó)
Kernel::respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, int depth, bool srai, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, int depth, bool srai, const string &prefix = Ó)
Kernel::root	./src/Kernel.cpp	/^Nodemaster *Kernel::root = new Nodemaster();$/;"	m	class:Kernel	file:
Kernel::root	./src/Kernel.h	/^    static Nodemaster *root;$/;"	m	class:Kernel	access:private
Kernel::~Kernel	./src/Kernel.cpp	/^Kernel::~Kernel()$/;"	f	class:Kernel	signature:()
Kernel::~Kernel	./src/Kernel.h	/^    ~Kernel();$/;"	p	class:Kernel	access:public	signature:()
LEARN_PROCESSOR_H	./src/LearnProcessor.h	11;"	d
LOGGER_H	./src/Logger.h	2;"	d
LOWERCASE_PROCESSOR_H	./src/LowercaseProcessor.h	7;"	d
LearnProcessor	./src/LearnProcessor.h	/^    LearnProcessor()$/;"	f	class:LearnProcessor	access:public	signature:()
LearnProcessor	./src/LearnProcessor.h	/^class LearnProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
LearnProcessor::LearnProcessor	./src/LearnProcessor.h	/^    LearnProcessor()$/;"	f	class:LearnProcessor	access:public	signature:()
LearnProcessor::closeFile	./src/LearnProcessor.h	/^    void closeFile()$/;"	f	class:LearnProcessor	access:private	signature:()
LearnProcessor::init	./src/LearnProcessor.h	/^    bool init;$/;"	m	class:LearnProcessor	access:private
LearnProcessor::learnFile	./src/LearnProcessor.h	/^    fstream learnFile;$/;"	m	class:LearnProcessor	access:private
LearnProcessor::openFile	./src/LearnProcessor.h	/^    void openFile()$/;"	f	class:LearnProcessor	access:private	signature:()
LearnProcessor::process	./src/LearnProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:LearnProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
LearnProcessor::removeNewlines	./src/LearnProcessor.h	/^    string removeNewlines(const string &input)$/;"	f	class:LearnProcessor	access:private	signature:(const string &input)
LearnProcessor::~LearnProcessor	./src/LearnProcessor.h	/^    ~LearnProcessor()$/;"	f	class:LearnProcessor	access:public	signature:()
Logger	./src/Logger.h	/^    Logger()$/;"	f	class:Logger	access:public	signature:()
Logger	./src/Logger.h	/^class Logger$/;"	c
Logger::DEBUG	./src/Logger.h	/^    static const int DEBUG;$/;"	m	class:Logger	access:public
Logger::Logger	./src/Logger.h	/^    Logger()$/;"	f	class:Logger	access:public	signature:()
Logger::closeLog	./src/Logger.cpp	/^void Logger::closeLog(fstream &file)$/;"	f	class:Logger	signature:(fstream &file)
Logger::closeLog	./src/Logger.h	/^    static void closeLog(fstream &file);$/;"	p	class:Logger	access:private	signature:(fstream &file)
Logger::log	./src/Logger.cpp	/^void Logger::log(const string &msg, const string &file, bool header)$/;"	f	class:Logger	signature:(const string &msg, const string &file, bool header)
Logger::log	./src/Logger.cpp	/^void Logger::log(const string &msg, int logType)$/;"	f	class:Logger	signature:(const string &msg, int logType)
Logger::log	./src/Logger.h	/^    static void log(const string &msg, const string &file, bool header = true);$/;"	p	class:Logger	access:public	signature:(const string &msg, const string &file, bool header = true)
Logger::log	./src/Logger.h	/^    static void log(const string &msg, int logType);$/;"	p	class:Logger	access:public	signature:(const string &msg, int logType)
Logger::openLog	./src/Logger.cpp	/^bool Logger::openLog(fstream &file, const string &name)$/;"	f	class:Logger	signature:(fstream &file, const string &name)
Logger::openLog	./src/Logger.h	/^    static bool openLog(fstream &file, const string &name);$/;"	p	class:Logger	access:private	signature:(fstream &file, const string &name)
Logger::timestamp	./src/Logger.cpp	/^string Logger::timestamp()$/;"	f	class:Logger	signature:()
Logger::timestamp	./src/Logger.h	/^    static string timestamp();$/;"	p	class:Logger	access:public	signature:()
Logger::~Logger	./src/Logger.h	/^    ~Logger()$/;"	f	class:Logger	access:public	signature:()
LowercaseProcessor	./src/LowercaseProcessor.h	/^class LowercaseProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
LowercaseProcessor::process	./src/LowercaseProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:LowercaseProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
LowercaseProcessor::~LowercaseProcessor	./src/LowercaseProcessor.h	/^    ~LowercaseProcessor() { }$/;"	f	class:LowercaseProcessor	access:public	signature:()
MAIN_H	./src/Main.h	2;"	d
MAJOR	./version.h	/^	static const long MAJOR = 1;$/;"	m	namespace:AutoVersion
MATCH_H	./src/Match.h	7;"	d
MINOR	./version.h	/^	static const long MINOR = 4;$/;"	m	namespace:AutoVersion
MONTH	./version.h	/^	static const char MONTH[] = "01";$/;"	m	namespace:AutoVersion
Main	./src/wxwindows.cpp	/^class Main : public wxApp$/;"	c	file:	inherits:wxApp
Main::OnInit	./src/wxwindows.cpp	/^    virtual bool OnInit();$/;"	p	class:Main	file:	access:public	signature:()
Main::OnInit	./src/wxwindows.cpp	/^bool Main::OnInit()$/;"	f	class:Main	signature:()
Main::jThread	./src/wxwindows.cpp	/^    JThread *jThread;$/;"	m	class:Main	file:	access:private
Match	./src/Match.h	/^class Match$/;"	c
Match::addContextStar	./src/Match.cpp	/^void Match::addContextStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::addContextStar	./src/Match.h	/^    void addContextStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::addInputStar	./src/Match.cpp	/^void Match::addInputStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::addInputStar	./src/Match.h	/^    void addInputStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::addThatStar	./src/Match.cpp	/^void Match::addThatStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::addThatStar	./src/Match.h	/^    void addThatStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::addTopicStar	./src/Match.cpp	/^void Match::addTopicStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::addTopicStar	./src/Match.h	/^    void addTopicStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::contextPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
Match::contextStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
Match::getContextPattern	./src/Match.cpp	/^string Match::getContextPattern() const$/;"	f	class:Match	signature:() const
Match::getContextPattern	./src/Match.h	/^    string getContextPattern() const;$/;"	p	class:Match	access:public	signature:() const
Match::getContextStar	./src/Match.cpp	/^string Match::getContextStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
Match::getContextStar	./src/Match.h	/^    string getContextStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
Match::getContextStarCount	./src/Match.cpp	/^unsigned int Match::getContextStarCount() const$/;"	f	class:Match	signature:() const
Match::getContextStarCount	./src/Match.h	/^    unsigned int getContextStarCount() const;$/;"	p	class:Match	access:public	signature:() const
Match::getInputPattern	./src/Match.cpp	/^string Match::getInputPattern() const$/;"	f	class:Match	signature:() const
Match::getInputPattern	./src/Match.h	/^    string getInputPattern() const;$/;"	p	class:Match	access:public	signature:() const
Match::getInputStar	./src/Match.cpp	/^string Match::getInputStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
Match::getInputStar	./src/Match.h	/^    string getInputStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
Match::getInputStarCount	./src/Match.cpp	/^unsigned int Match::getInputStarCount() const$/;"	f	class:Match	signature:() const
Match::getInputStarCount	./src/Match.h	/^    unsigned int getInputStarCount() const;$/;"	p	class:Match	access:public	signature:() const
Match::getNode	./src/Match.cpp	/^Nodemaster *Match::getNode() const$/;"	f	class:Match	signature:() const
Match::getNode	./src/Match.h	/^    Nodemaster *getNode() const;$/;"	p	class:Match	access:public	signature:() const
Match::getPath	./src/Match.cpp	/^string Match::getPath() const$/;"	f	class:Match	signature:() const
Match::getPath	./src/Match.h	/^    string getPath() const;$/;"	p	class:Match	access:public	signature:() const
Match::getTemplate	./src/Match.cpp	/^string Match::getTemplate() const$/;"	f	class:Match	signature:() const
Match::getTemplate	./src/Match.h	/^    string getTemplate() const;$/;"	p	class:Match	access:public	signature:() const
Match::getThatPattern	./src/Match.cpp	/^string Match::getThatPattern() const$/;"	f	class:Match	signature:() const
Match::getThatPattern	./src/Match.h	/^    string getThatPattern() const;$/;"	p	class:Match	access:public	signature:() const
Match::getThatStar	./src/Match.cpp	/^string Match::getThatStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
Match::getThatStar	./src/Match.h	/^    string getThatStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
Match::getThatStarCount	./src/Match.cpp	/^unsigned int Match::getThatStarCount() const$/;"	f	class:Match	signature:() const
Match::getThatStarCount	./src/Match.h	/^    unsigned int getThatStarCount() const;$/;"	p	class:Match	access:public	signature:() const
Match::getTopicPattern	./src/Match.cpp	/^string Match::getTopicPattern() const$/;"	f	class:Match	signature:() const
Match::getTopicPattern	./src/Match.h	/^    string getTopicPattern() const;$/;"	p	class:Match	access:public	signature:() const
Match::getTopicStar	./src/Match.cpp	/^string Match::getTopicStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
Match::getTopicStar	./src/Match.h	/^    string getTopicStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
Match::getTopicStarCount	./src/Match.cpp	/^unsigned int Match::getTopicStarCount() const$/;"	f	class:Match	signature:() const
Match::getTopicStarCount	./src/Match.h	/^    unsigned int getTopicStarCount() const;$/;"	p	class:Match	access:public	signature:() const
Match::inputPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
Match::inputStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
Match::node	./src/Match.h	/^    Nodemaster *node;$/;"	m	class:Match	access:private
Match::path	./src/Match.h	/^    string path;$/;"	m	class:Match	access:private
Match::setContextPattern	./src/Match.cpp	/^void Match::setContextPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::setContextPattern	./src/Match.h	/^    void setContextPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::setInputPattern	./src/Match.cpp	/^void Match::setInputPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::setInputPattern	./src/Match.h	/^    void setInputPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::setNode	./src/Match.cpp	/^void Match::setNode(Nodemaster *n)$/;"	f	class:Match	signature:(Nodemaster *n)
Match::setNode	./src/Match.h	/^    void setNode(Nodemaster *n);$/;"	p	class:Match	access:public	signature:(Nodemaster *n)
Match::setPath	./src/Match.cpp	/^void Match::setPath(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::setPath	./src/Match.h	/^    void setPath(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::setThatPattern	./src/Match.cpp	/^void Match::setThatPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::setThatPattern	./src/Match.h	/^    void setThatPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::setTopicPattern	./src/Match.cpp	/^void Match::setTopicPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
Match::setTopicPattern	./src/Match.h	/^    void setTopicPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
Match::thatPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
Match::thatStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
Match::topicPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
Match::topicStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
NAME_PROCESSOR_H	./src/NameProcessor.h	10;"	d
NODEMAPPER_H	./src/Nodemapper.h	7;"	d
NODEMASTER_H	./src/Nodemaster.h	7;"	d
NODE_WALKER_H	./src/NodeWalker.h	2;"	d
NORMALIZE_PROCESSOR_H	./src/NormalizeProcessor.h	7;"	d
NameProcessor	./src/NameProcessor.h	/^class NameProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
NameProcessor::process	./src/NameProcessor.h	/^    string process(Match *, PElement, Responder *, const string &id)$/;"	f	class:NameProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
NameProcessor::~NameProcessor	./src/NameProcessor.h	/^    ~NameProcessor() { }$/;"	f	class:NameProcessor	access:public	signature:()
NewTabEvent	./src/wxwindows.h	/^    NewTabEvent(const string &name, int size)$/;"	f	class:NewTabEvent	access:public	signature:(const string &name, int size)
NewTabEvent	./src/wxwindows.h	/^class NewTabEvent : public wxEvent$/;"	c	inherits:wxEvent
NewTabEvent::Clone	./src/wxwindows.h	/^    virtual wxEvent *Clone() const$/;"	f	class:NewTabEvent	access:public	signature:() const
NewTabEvent::NewTabEvent	./src/wxwindows.h	/^    NewTabEvent(const string &name, int size)$/;"	f	class:NewTabEvent	access:public	signature:(const string &name, int size)
NewTabEvent::name	./src/wxwindows.h	/^    string name;$/;"	m	class:NewTabEvent	access:public
NewTabEvent::size	./src/wxwindows.h	/^    int size;$/;"	m	class:NewTabEvent	access:public
Node	./src/Substituter.h	/^    Node() { }$/;"	f	class:Node	access:public	signature:()
Node	./src/Substituter.h	/^class Node$/;"	c
Node::Node	./src/Substituter.h	/^    Node() { }$/;"	f	class:Node	access:public	signature:()
Node::children	./src/Substituter.h	/^    map<char, Node*> children;$/;"	m	class:Node	access:public
Node::getChild	./src/Substituter.h	/^    Node *getChild(char ch)$/;"	f	class:Node	access:public	signature:(char ch)
Node::replace	./src/Substituter.h	/^    string replace;$/;"	m	class:Node	access:public
NodeWalker	./src/NodeWalker.h	/^class NodeWalker$/;"	c
NodeWalker::dumpAiml	./src/NodeWalker.cpp	/^void NodeWalker::dumpAiml(Nodemaster *root)$/;"	f	class:NodeWalker	signature:(Nodemaster *root)
NodeWalker::dumpAiml	./src/NodeWalker.cpp	/^void NodeWalker::dumpAiml(Nodemaster *root, const string &path, PElement doc)$/;"	f	class:NodeWalker	signature:(Nodemaster *root, const string &path, PElement doc)
NodeWalker::dumpAiml	./src/NodeWalker.h	/^    static void dumpAiml(Nodemaster *);$/;"	p	class:NodeWalker	access:public	signature:(Nodemaster *)
NodeWalker::dumpAiml	./src/NodeWalker.h	/^    static void dumpAiml(Nodemaster *, const string &, PElement);$/;"	p	class:NodeWalker	access:public	signature:(Nodemaster *, const string &, PElement)
Nodemapper	./src/Nodemapper.h	/^class Nodemapper$/;"	c
Nodemapper::addAuthor	./src/Nodemapper.h	/^    virtual void addAuthor(const string &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &)
Nodemapper::addChild	./src/Nodemapper.h	/^    virtual void addChild(const string &, Nodemapper *) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &, Nodemapper *)
Nodemapper::addFilename	./src/Nodemapper.h	/^    virtual void addFilename(const string &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &)
Nodemapper::addTemplate	./src/Nodemapper.h	/^    virtual void addTemplate(const Template &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const Template &)
Nodemapper::getAuthor	./src/Nodemapper.h	/^    virtual string getAuthor() = 0;$/;"	p	class:Nodemapper	access:public	signature:()
Nodemapper::getChild	./src/Nodemapper.h	/^    virtual Nodemapper *getChild(const string &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &)
Nodemapper::getFilename	./src/Nodemapper.h	/^    virtual string getFilename() = 0;$/;"	p	class:Nodemapper	access:public	signature:()
Nodemapper::getTemplate	./src/Nodemapper.h	/^    virtual string getTemplate() = 0;$/;"	p	class:Nodemapper	access:public	signature:()
Nodemapper::~Nodemapper	./src/Nodemapper.h	/^    virtual ~Nodemapper() { }$/;"	f	class:Nodemapper	access:public	signature:()
Nodemaster	./src/Nodemaster.h	/^    Nodemaster()$/;"	f	class:Nodemaster	access:public	signature:()
Nodemaster	./src/Nodemaster.h	/^class Nodemaster$/;"	c
Nodemaster::Nodemaster	./src/Nodemaster.h	/^    Nodemaster()$/;"	f	class:Nodemaster	access:public	signature:()
Nodemaster::addChild	./src/Nodemaster.cpp	/^void Nodemaster::addChild(const string &key, Nodemaster *value)$/;"	f	class:Nodemaster	signature:(const string &key, Nodemaster *value)
Nodemaster::addChild	./src/Nodemaster.h	/^    void addChild(const string &, Nodemaster *);$/;"	p	class:Nodemaster	access:public	signature:(const string &, Nodemaster *)
Nodemaster::addTemplate	./src/Nodemaster.cpp	/^void Nodemaster::addTemplate(Template *t)$/;"	f	class:Nodemaster	signature:(Template *t)
Nodemaster::addTemplate	./src/Nodemaster.h	/^    void addTemplate(Template *t);$/;"	p	class:Nodemaster	access:public	signature:(Template *t)
Nodemaster::children	./src/Nodemaster.h	/^    map<char *, Nodemaster *> children;$/;"	m	class:Nodemaster	access:private
Nodemaster::getActualTemplate	./src/Nodemaster.cpp	/^Template *Nodemaster::getActualTemplate()$/;"	f	class:Nodemaster	signature:()
Nodemaster::getActualTemplate	./src/Nodemaster.h	/^    Template *getActualTemplate();$/;"	p	class:Nodemaster	access:public	signature:()
Nodemaster::getChild	./src/Nodemaster.cpp	/^Nodemaster *Nodemaster::getChild(const string &key)$/;"	f	class:Nodemaster	signature:(const string &key)
Nodemaster::getChild	./src/Nodemaster.h	/^    Nodemaster *getChild(const string &);$/;"	p	class:Nodemaster	access:public	signature:(const string &)
Nodemaster::getTemplate	./src/Nodemaster.cpp	/^string Nodemaster::getTemplate(bool reload)$/;"	f	class:Nodemaster	signature:(bool reload)
Nodemaster::getTemplate	./src/Nodemaster.h	/^    string getTemplate(bool reload = true);$/;"	p	class:Nodemaster	access:public	signature:(bool reload = true)
Nodemaster::hasTemplate	./src/Nodemaster.cpp	/^bool Nodemaster::hasTemplate()$/;"	f	class:Nodemaster	signature:()
Nodemaster::hasTemplate	./src/Nodemaster.h	/^    bool hasTemplate();$/;"	p	class:Nodemaster	access:public	signature:()
Nodemaster::templates	./src/Nodemaster.h	/^    Template *templates;$/;"	m	class:Nodemaster	access:private
Nodemaster::~Nodemaster	./src/Nodemaster.h	/^    ~Nodemaster() { }$/;"	f	class:Nodemaster	access:public	signature:()
NormalizeProcessor	./src/NormalizeProcessor.h	/^class NormalizeProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
NormalizeProcessor::process	./src/NormalizeProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:NormalizeProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
NormalizeProcessor::~NormalizeProcessor	./src/NormalizeProcessor.h	/^    ~NormalizeProcessor() { }$/;"	f	class:NormalizeProcessor	access:public	signature:()
OnInit	./src/wxwindows.cpp	/^    virtual bool OnInit();$/;"	p	class:Main	file:	access:public	signature:()
OnInit	./src/wxwindows.cpp	/^bool Main::OnInit()$/;"	f	class:Main	signature:()
Output	./src/wxwindows.cpp	/^void JThread::Output(const char *csn, const char *csm, bool read)$/;"	f	class:JThread	signature:(const char *csn, const char *csm, bool read)
Output	./src/wxwindows.h	/^    void Output(const char *csn, const char *csm, bool read);$/;"	p	class:JThread	access:public	signature:(const char *csn, const char *csm, bool read)
PARSER_H	./src/Parser.h	5;"	d
PERSON_PROCESSOR_H	./src/PersonProcessor.h	7;"	d
PElement	./src/Element.h	/^typedef Pointer<Element> PElement;$/;"	t
POINTER_H	./src/Pointer.h	7;"	d
PREDICATE_ENGINE_H	./src/PredicateEngine.h	26;"	d
PRE_PARSER_H	./src/PreParser.h	5;"	d
Parser	./src/Parser.h	/^    Parser()$/;"	f	class:Parser	access:public	signature:()
Parser	./src/Parser.h	/^class Parser : public SaxListener$/;"	c	inherits:SaxListener
Parser::Parser	./src/Parser.h	/^    Parser()$/;"	f	class:Parser	access:public	signature:()
Parser::current	./src/Parser.h	/^    PElement current, root;$/;"	m	class:Parser	access:private
Parser::elementCData	./src/Parser.cpp	/^void Parser::elementCData(const string &cdata, int)$/;"	f	class:Parser	signature:(const string &cdata, int)
Parser::elementCData	./src/Parser.h	/^    void elementCData(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
Parser::elementFinished	./src/Parser.cpp	/^void Parser::elementFinished(const string &, int)$/;"	f	class:Parser	signature:(const string &, int)
Parser::elementFinished	./src/Parser.h	/^    void elementFinished(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
Parser::elementStarted	./src/Parser.cpp	/^void Parser::elementStarted(const string &name, attributeMap *am, int)$/;"	f	class:Parser	signature:(const string &name, attributeMap *am, int)
Parser::elementStarted	./src/Parser.cpp	/^void Parser::elementStarted(const string &name, int)$/;"	f	class:Parser	signature:(const string &name, int)
Parser::elementStarted	./src/Parser.h	/^    void elementStarted(const string &, attributeMap *, int);$/;"	p	class:Parser	access:private	signature:(const string &, attributeMap *, int)
Parser::elementStarted	./src/Parser.h	/^    void elementStarted(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
Parser::elementText	./src/Parser.cpp	/^void Parser::elementText(const string &text, int)$/;"	f	class:Parser	signature:(const string &text, int)
Parser::elementText	./src/Parser.h	/^    void elementText(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
Parser::getRoot	./src/Parser.cpp	/^PElement Parser::getRoot() const$/;"	f	class:Parser	signature:() const
Parser::getRoot	./src/Parser.h	/^    PElement getRoot() const;$/;"	p	class:Parser	access:public	signature:() const
Parser::recurser	./src/Parser.h	/^    stack<PElement> recurser;$/;"	m	class:Parser	access:private
Parser::root	./src/Parser.h	/^    PElement current, root;$/;"	m	class:Parser	access:private
Person2Processor	./src/PersonProcessor.h	/^class Person2Processor : public AimlProcessor$/;"	c	inherits:AimlProcessor
Person2Processor::getName	./src/PersonProcessor.h	/^    string getName() const$/;"	f	class:Person2Processor	access:public	signature:() const
Person2Processor::getVersion	./src/PersonProcessor.h	/^    string getVersion() const$/;"	f	class:Person2Processor	access:public	signature:() const
Person2Processor::process	./src/PersonProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:Person2Processor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
Person2Processor::~Person2Processor	./src/PersonProcessor.h	/^    ~Person2Processor() { }$/;"	f	class:Person2Processor	access:public	signature:()
PersonProcessor	./src/PersonProcessor.h	/^class PersonProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
PersonProcessor::process	./src/PersonProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:PersonProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
PersonProcessor::~PersonProcessor	./src/PersonProcessor.h	/^    ~PersonProcessor() { }$/;"	f	class:PersonProcessor	access:public	signature:()
Pointer	./src/Pointer.h	/^    Pointer(const Pointer<T> &rhs) : value(rhs.value)$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs)
Pointer	./src/Pointer.h	/^    explicit Pointer(T *t = NULL) : value(new Holder(t))$/;"	f	class:Pointer	access:public	signature:(T *t = NULL)
Pointer	./src/Pointer.h	/^class Pointer$/;"	c
Pointer::Holder	./src/Pointer.h	/^    class Holder$/;"	c	class:Pointer	access:protected
Pointer::Holder::Holder	./src/Pointer.h	/^        Holder(T *t) : datum(t), count(1)$/;"	f	class:Pointer::Holder	access:public	signature:(T *t)
Pointer::Holder::count	./src/Pointer.h	/^        unsigned count;$/;"	m	class:Pointer::Holder	access:public
Pointer::Holder::datum	./src/Pointer.h	/^        T *datum;$/;"	m	class:Pointer::Holder	access:public
Pointer::Holder::~Holder	./src/Pointer.h	/^        ~Holder()$/;"	f	class:Pointer::Holder	access:public	signature:()
Pointer::Pointer	./src/Pointer.h	/^    Pointer(const Pointer<T> &rhs) : value(rhs.value)$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs)
Pointer::Pointer	./src/Pointer.h	/^    explicit Pointer(T *t = NULL) : value(new Holder(t))$/;"	f	class:Pointer	access:public	signature:(T *t = NULL)
Pointer::bind	./src/Pointer.h	/^    void bind(T *t)$/;"	f	class:Pointer	access:protected	signature:(T *t)
Pointer::bind	./src/Pointer.h	/^    void bind(const Pointer<T> &rhs)$/;"	f	class:Pointer	access:protected	signature:(const Pointer<T> &rhs)
Pointer::operator !=	./src/Pointer.h	/^    bool operator!=(T *t) const$/;"	f	class:Pointer	access:public	signature:(T *t) const
Pointer::operator !=	./src/Pointer.h	/^    bool operator!=(const Pointer<T> &rhs) const$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs) const
Pointer::operator *	./src/Pointer.h	/^    T &operator*()$/;"	f	class:Pointer	access:public	signature:()
Pointer::operator *	./src/Pointer.h	/^    const T &operator*() const$/;"	f	class:Pointer	access:public	signature:() const
Pointer::operator ->	./src/Pointer.h	/^    T *operator->()$/;"	f	class:Pointer	access:public	signature:()
Pointer::operator ->	./src/Pointer.h	/^    const T *operator->() const$/;"	f	class:Pointer	access:public	signature:() const
Pointer::operator =	./src/Pointer.h	/^    Pointer<T> &operator=(T *t)$/;"	f	class:Pointer	access:public	signature:(T *t)
Pointer::operator =	./src/Pointer.h	/^    Pointer<T> &operator=(const Pointer<T> &rhs)$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs)
Pointer::operator ==	./src/Pointer.h	/^    bool operator==(T *t) const$/;"	f	class:Pointer	access:public	signature:(T *t) const
Pointer::operator ==	./src/Pointer.h	/^    bool operator==(const Pointer<T> &rhs) const$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs) const
Pointer::unbind	./src/Pointer.h	/^    void unbind()$/;"	f	class:Pointer	access:protected	signature:()
Pointer::value	./src/Pointer.h	/^    Holder *value;$/;"	m	class:Pointer	access:protected
Pointer::~Pointer	./src/Pointer.h	/^    ~Pointer()$/;"	f	class:Pointer	access:public	signature:()
PreParser	./src/PreParser.h	/^    PreParser(const string &fn = "")$/;"	f	class:PreParser	access:public	signature:(const string &fn = Ó)
PreParser	./src/PreParser.h	/^class PreParser : public SaxListener$/;"	c	inherits:SaxListener
PreParser::PreParser	./src/PreParser.h	/^    PreParser(const string &fn = "")$/;"	f	class:PreParser	access:public	signature:(const string &fn = Ó)
PreParser::context	./src/PreParser.h	/^    string context;$/;"	m	class:PreParser	access:private
PreParser::currentTag	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
PreParser::elementCData	./src/PreParser.cpp	/^void PreParser::elementCData(const string &, int)$/;"	f	class:PreParser	signature:(const string &, int)
PreParser::elementCData	./src/PreParser.h	/^    void elementCData(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
PreParser::elementFinished	./src/PreParser.cpp	/^void PreParser::elementFinished(const string &name, int index)$/;"	f	class:PreParser	signature:(const string &name, int index)
PreParser::elementFinished	./src/PreParser.h	/^    void elementFinished(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
PreParser::elementStarted	./src/PreParser.cpp	/^void PreParser::elementStarted(const string &name, attributeMap *attr, int index)$/;"	f	class:PreParser	signature:(const string &name, attributeMap *attr, int index)
PreParser::elementStarted	./src/PreParser.cpp	/^void PreParser::elementStarted(const string &name, int index)$/;"	f	class:PreParser	signature:(const string &name, int index)
PreParser::elementStarted	./src/PreParser.h	/^    void elementStarted(const string &, attributeMap *, int);$/;"	p	class:PreParser	access:public	signature:(const string &, attributeMap *, int)
PreParser::elementStarted	./src/PreParser.h	/^    void elementStarted(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
PreParser::elementText	./src/PreParser.cpp	/^void PreParser::elementText(const string &text, int)$/;"	f	class:PreParser	signature:(const string &text, int)
PreParser::elementText	./src/PreParser.h	/^    void elementText(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
PreParser::filename	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
PreParser::pattern	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
PreParser::templateBegin	./src/PreParser.h	/^    int templateBegin;$/;"	m	class:PreParser	access:private
PreParser::that	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
PreParser::topic	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
PreParser::~PreParser	./src/PreParser.h	/^    virtual ~PreParser()$/;"	f	class:PreParser	access:public	signature:()
PredicateEngine	./src/PredicateEngine.cpp	/^PredicateEngine::PredicateEngine()$/;"	f	class:PredicateEngine	signature:()
PredicateEngine	./src/PredicateEngine.h	/^    PredicateEngine();	\/\/	This will load the predicates$/;"	p	class:PredicateEngine	access:public	signature:()
PredicateEngine	./src/PredicateEngine.h	/^class PredicateEngine$/;"	c
PredicateEngine::PredicateEngine	./src/PredicateEngine.cpp	/^PredicateEngine::PredicateEngine()$/;"	f	class:PredicateEngine	signature:()
PredicateEngine::PredicateEngine	./src/PredicateEngine.h	/^    PredicateEngine();	\/\/	This will load the predicates$/;"	p	class:PredicateEngine	access:public	signature:()
PredicateEngine::addHistory	./src/PredicateEngine.cpp	/^void PredicateEngine::addHistory(const string &property, const string &id, const string &value)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &value)
PredicateEngine::addHistory	./src/PredicateEngine.h	/^    void addHistory(const string &property, const string &id, const string &value);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &value)
PredicateEngine::addValue	./src/PredicateEngine.cpp	/^void PredicateEngine::addValue(const string &property, const string &id, const string &value)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &value)
PredicateEngine::addValue	./src/PredicateEngine.h	/^    void addValue(const string &property, const string &id, const string &value);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &value)
PredicateEngine::clearValue	./src/PredicateEngine.cpp	/^void PredicateEngine::clearValue(const string &property, const string &id, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, int index)
PredicateEngine::clearValue	./src/PredicateEngine.h	/^    void clearValue(const string &property, const string &id, int index = 1);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, int index = 1)
PredicateEngine::clearValues	./src/PredicateEngine.cpp	/^void PredicateEngine::clearValues(const string &property, const string &id)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id)
PredicateEngine::clearValues	./src/PredicateEngine.h	/^    void clearValues(const string &property, const string &id);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id)
PredicateEngine::getHistory	./src/PredicateEngine.cpp	/^string PredicateEngine::getHistory(const string &property, const string &id, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, int index)
PredicateEngine::getHistory	./src/PredicateEngine.h	/^    string getHistory(const string &property, const string &id, int index = 0);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, int index = 0)
PredicateEngine::getValue	./src/PredicateEngine.cpp	/^string PredicateEngine::getValue(const string &property, const string &id, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, int index)
PredicateEngine::getValue	./src/PredicateEngine.h	/^    string getValue(const string &property, const string &id, int index = 1);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, int index = 1)
PredicateEngine::getValues	./src/PredicateEngine.cpp	/^string PredicateEngine::getValues(const string &property, const string &id, const string &conjunction)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &conjunction)
PredicateEngine::getValues	./src/PredicateEngine.h	/^    string getValues(const string &property, const string &id, const string &conjunction = " and ");$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &conjunction = Ó)
PredicateEngine::history	./src/PredicateEngine.h	/^    historyMap history;$/;"	m	class:PredicateEngine	access:private
PredicateEngine::setValue	./src/PredicateEngine.cpp	/^void PredicateEngine::setValue(const string &property, const string &id, const string &value, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &value, int index)
PredicateEngine::setValue	./src/PredicateEngine.h	/^    void setValue(const string &property, const string &id, const string &value, int index = 1);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &value, int index = 1)
PredicateEngine::userPredicates	./src/PredicateEngine.h	/^    uArrayMap userPredicates;$/;"	m	class:PredicateEngine	access:private
PredicateEngine::~PredicateEngine	./src/PredicateEngine.cpp	/^PredicateEngine::~PredicateEngine()$/;"	f	class:PredicateEngine	signature:()
PredicateEngine::~PredicateEngine	./src/PredicateEngine.h	/^    ~PredicateEngine();	\/\/	This will save the predicates$/;"	p	class:PredicateEngine	access:public	signature:()
RANDOM_PROCESSOR_H	./src/RandomProcessor.h	12;"	d
RC_FILEVERSION	./version.h	24;"	d
RC_FILEVERSION_STRING	./version.h	25;"	d
RECV	./src/Socket.cpp	/^string RECV = "recv: ";$/;"	v
RESPONDER_H	./src/Responder.h	7;"	d
REVISION	./version.h	/^	static const long REVISION = 2335;$/;"	m	namespace:AutoVersion
RandomProcessor	./src/RandomProcessor.h	/^    RandomProcessor()$/;"	f	class:RandomProcessor	access:public	signature:()
RandomProcessor	./src/RandomProcessor.h	/^class RandomProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
RandomProcessor::RandomProcessor	./src/RandomProcessor.h	/^    RandomProcessor()$/;"	f	class:RandomProcessor	access:public	signature:()
RandomProcessor::process	./src/RandomProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:RandomProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
RandomProcessor::~RandomProcessor	./src/RandomProcessor.h	/^    ~RandomProcessor() { }$/;"	f	class:RandomProcessor	access:public	signature:()
Read	./src/Stream.cpp	/^void Stream::Read(const char *str)$/;"	f	class:Stream	signature:(const char *str)
Read	./src/Stream.h	/^    virtual void Read(const char *str);$/;"	p	class:Stream	access:public	signature:(const char *str)
Read	./src/wxwindows.h	/^    void Read(const char *cs)$/;"	f	class:GuiStream	access:public	signature:(const char *cs)
Responder	./src/Responder.h	/^class Responder$/;"	c
Responder::respond	./src/Responder.h	/^    virtual string respond(Match *, PElement, const string &) = 0;$/;"	p	class:Responder	access:public	signature:(Match *, PElement, const string &)
Responder::~Responder	./src/Responder.h	/^    virtual ~Responder() { };$/;"	f	class:Responder	access:public	signature:()
SAX_PARSER_H	./src/SaxParser.h	2;"	d
SECURE_PROCESSOR_H	./src/SecureProcessor.h	11;"	d
SEND	./src/Socket.cpp	/^string SEND = "sent: ";$/;"	v
SENTENCE_PROCESSOR_H	./src/SentenceProcessor.h	7;"	d
SERVER_SOCKET_H	./src/ServerSocket.h	2;"	d
SET_PROCESSOR_H	./src/SetProcessor.h	7;"	d
SHA1_DEFINED	./src/sha1.h	29;"	d
SOCKET_H	./src/Socket.h	2;"	d
SOCKET_HANDLER_H	./src/SocketHandler.h	2;"	d
SOCK_FLAGS	./src/Compat.h	5;"	d
SOCK_FLAGS	./src/Compat.h	7;"	d
SOCK_FLAGS	./src/Compat.h	8;"	d
SRAI_PROCESSOR_H	./src/SraiProcessor.h	7;"	d
SR_PROCESSOR_H	./src/SrProcessor.h	7;"	d
STAR_PROCESSOR_H	./src/StarProcessor.h	11;"	d
STATUS	./version.h	/^	static const char STATUS[] = "Alpha";$/;"	m	namespace:AutoVersion
STATUS_SHORT	./version.h	/^	static const char STATUS_SHORT[] = "a";$/;"	m	namespace:AutoVersion
STREAM_H	./src/Stream.h	2;"	d
STRING_TOKENIZER_H	./src/StringTokenizer.h	7;"	d
SUBSTITUTER_H	./src/Substituter.h	10;"	d
SUBSTITUTE_PROCESSOR_H	./src/SubstituteProcessor.h	7;"	d
SYSTEM_PROCESSOR_H	./src/SystemProcessor.h	13;"	d
SaxListener	./src/SaxParser.h	/^    SaxListener()$/;"	f	class:SaxListener	access:public	signature:()
SaxListener	./src/SaxParser.h	/^class SaxListener$/;"	c
SaxListener::SaxListener	./src/SaxParser.h	/^    SaxListener()$/;"	f	class:SaxListener	access:public	signature:()
SaxListener::elementCData	./src/SaxParser.h	/^    virtual void elementCData(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
SaxListener::elementFinished	./src/SaxParser.h	/^    virtual void elementFinished(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
SaxListener::elementStarted	./src/SaxParser.h	/^    virtual void elementStarted(const string &, attributeMap *, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, attributeMap *, int)
SaxListener::elementStarted	./src/SaxParser.h	/^    virtual void elementStarted(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
SaxListener::elementText	./src/SaxParser.h	/^    virtual void elementText(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
SaxListener::~SaxListener	./src/SaxParser.h	/^    virtual ~SaxListener()$/;"	f	class:SaxListener	access:public	signature:()
SaxParser	./src/SaxParser.h	/^    SaxParser(SaxListener *sl)$/;"	f	class:SaxParser	access:public	signature:(SaxListener *sl)
SaxParser	./src/SaxParser.h	/^class SaxParser$/;"	c
SaxParser::SaxParser	./src/SaxParser.h	/^    SaxParser(SaxListener *sl)$/;"	f	class:SaxParser	access:public	signature:(SaxListener *sl)
SaxParser::addElement	./src/SaxParser.cpp	/^void SaxParser::addElement(vector<char> &vb, int index)$/;"	f	class:SaxParser	signature:(vector<char> &vb, int index)
SaxParser::addElement	./src/SaxParser.h	/^    void addElement(string &, int);$/;"	p	class:SaxParser	access:private	signature:(string &, int)
SaxParser::addElement	./src/SaxParser.h	/^    void addElement(vector<char> &, int);$/;"	p	class:SaxParser	access:private	signature:(vector<char> &, int)
SaxParser::getListener	./src/SaxParser.h	/^    SaxListener *getListener()$/;"	f	class:SaxParser	access:public	signature:()
SaxParser::listener	./src/SaxParser.h	/^    SaxListener *listener;$/;"	m	class:SaxParser	access:private
SaxParser::parse	./src/SaxParser.cpp	/^void SaxParser::parse(istream &in)$/;"	f	class:SaxParser	signature:(istream &in)
SaxParser::parse	./src/SaxParser.h	/^    void parse(istream &);$/;"	p	class:SaxParser	access:public	signature:(istream &)
SaxParser::~SaxParser	./src/SaxParser.h	/^    ~SaxParser()$/;"	f	class:SaxParser	access:public	signature:()
SecureProcessor	./src/SecureProcessor.h	/^    SecureProcessor()$/;"	f	class:SecureProcessor	access:public	signature:()
SecureProcessor	./src/SecureProcessor.h	/^class SecureProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
SecureProcessor::SecureProcessor	./src/SecureProcessor.h	/^    SecureProcessor()$/;"	f	class:SecureProcessor	access:public	signature:()
SecureProcessor::addAuthenticatedUser	./src/SecureProcessor.h	/^    static void addAuthenticatedUser(const string &id)$/;"	f	class:SecureProcessor	access:public	signature:(const string &id)
SecureProcessor::process	./src/SecureProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SecureProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
SecureProcessor::~SecureProcessor	./src/SecureProcessor.h	/^    ~SecureProcessor() { }$/;"	f	class:SecureProcessor	access:public	signature:()
SentenceProcessor	./src/SentenceProcessor.h	/^class SentenceProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
SentenceProcessor::process	./src/SentenceProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SentenceProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
SentenceProcessor::~SentenceProcessor	./src/SentenceProcessor.h	/^    ~SentenceProcessor() { }$/;"	f	class:SentenceProcessor	access:public	signature:()
ServerSocket	./src/ServerSocket.cpp	/^ServerSocket::ServerSocket(const int &port)$/;"	f	class:ServerSocket	signature:(const int &port)
ServerSocket	./src/ServerSocket.h	/^    ServerSocket(const int &port);$/;"	p	class:ServerSocket	access:public	signature:(const int &port)
ServerSocket	./src/ServerSocket.h	/^class ServerSocket : public Socket$/;"	c	inherits:Socket
ServerSocket::ServerSocket	./src/ServerSocket.cpp	/^ServerSocket::ServerSocket(const int &port)$/;"	f	class:ServerSocket	signature:(const int &port)
ServerSocket::ServerSocket	./src/ServerSocket.h	/^    ServerSocket(const int &port);$/;"	p	class:ServerSocket	access:public	signature:(const int &port)
ServerSocket::getServerListener	./src/ServerSocket.cpp	/^ServerSocketListener *ServerSocket::getServerListener()$/;"	f	class:ServerSocket	signature:()
ServerSocket::getServerListener	./src/ServerSocket.h	/^    ServerSocketListener *getServerListener();$/;"	p	class:ServerSocket	access:public	signature:()
ServerSocket::init	./src/ServerSocket.cpp	/^bool ServerSocket::init()$/;"	f	class:ServerSocket	signature:()
ServerSocket::init	./src/ServerSocket.h	/^    bool init();$/;"	p	class:ServerSocket	access:public	signature:()
ServerSocket::process	./src/ServerSocket.cpp	/^void ServerSocket::process()$/;"	f	class:ServerSocket	signature:()
ServerSocket::process	./src/ServerSocket.h	/^    virtual void process();$/;"	p	class:ServerSocket	access:public	signature:()
ServerSocket::serverListener	./src/ServerSocket.h	/^    ServerSocketListener *serverListener;$/;"	m	class:ServerSocket	access:protected
ServerSocket::setServerListener	./src/ServerSocket.cpp	/^void ServerSocket::setServerListener(ServerSocketListener *serverListener)$/;"	f	class:ServerSocket	signature:(ServerSocketListener *serverListener)
ServerSocket::setServerListener	./src/ServerSocket.h	/^    void setServerListener(ServerSocketListener *);$/;"	p	class:ServerSocket	access:public	signature:(ServerSocketListener *)
ServerSocket::~ServerSocket	./src/ServerSocket.cpp	/^ServerSocket::~ServerSocket()$/;"	f	class:ServerSocket	signature:()
ServerSocket::~ServerSocket	./src/ServerSocket.h	/^    virtual ~ServerSocket();$/;"	p	class:ServerSocket	access:public	signature:()
ServerSocketListener	./src/ServerSocket.h	/^class ServerSocketListener$/;"	c
ServerSocketListener::awaitingClient	./src/ServerSocket.h	/^    virtual void awaitingClient(Socket *) = 0;$/;"	p	class:ServerSocketListener	access:public	signature:(Socket *)
ServerSocketListener::shutdown	./src/ServerSocket.h	/^    virtual void shutdown(const string &) = 0;$/;"	p	class:ServerSocketListener	access:public	signature:(const string &)
SetProcessor	./src/SetProcessor.h	/^class SetProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
SetProcessor::process	./src/SetProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SetProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
SetProcessor::~SetProcessor	./src/SetProcessor.h	/^    ~SetProcessor() { }$/;"	f	class:SetProcessor	access:public	signature:()
Socket	./src/Socket.cpp	/^Socket::Socket(const string &host, const int &port)$/;"	f	class:Socket	signature:(const string &host, const int &port)
Socket	./src/Socket.cpp	/^Socket::Socket(int socket, const char* name, int p):listener(NULL), sd(socket),$/;"	f	class:Socket	signature:(int socket, const char* name, int p)
Socket	./src/Socket.h	/^    Socket(const string &server, const int &port);$/;"	p	class:Socket	access:public	signature:(const string &server, const int &port)
Socket	./src/Socket.h	/^    Socket(int socket = -1,  const char* name=NULL, int port=0);$/;"	p	class:Socket	access:public	signature:(int socket = -1, const char* name=NULL, int port=0)
Socket	./src/Socket.h	/^class Socket$/;"	c
Socket::Socket	./src/Socket.cpp	/^Socket::Socket(const string &host, const int &port)$/;"	f	class:Socket	signature:(const string &host, const int &port)
Socket::Socket	./src/Socket.cpp	/^Socket::Socket(int socket, const char* name, int p):listener(NULL), sd(socket),$/;"	f	class:Socket	signature:(int socket, const char* name, int p)
Socket::Socket	./src/Socket.h	/^    Socket(const string &server, const int &port);$/;"	p	class:Socket	access:public	signature:(const string &server, const int &port)
Socket::Socket	./src/Socket.h	/^    Socket(int socket = -1,  const char* name=NULL, int port=0);$/;"	p	class:Socket	access:public	signature:(int socket = -1, const char* name=NULL, int port=0)
Socket::connect	./src/Socket.cpp	/^void Socket::connect()$/;"	f	class:Socket	signature:()
Socket::connect	./src/Socket.h	/^    void connect();$/;"	p	class:Socket	access:public	signature:()
Socket::disconnect	./src/Socket.cpp	/^void Socket::disconnect(const char *reason)$/;"	f	class:Socket	signature:(const char *reason)
Socket::disconnect	./src/Socket.h	/^    void disconnect(const char *reason = NULL);$/;"	p	class:Socket	access:public	signature:(const char *reason = NULL)
Socket::getListener	./src/Socket.cpp	/^SocketListener *Socket::getListener()$/;"	f	class:Socket	signature:()
Socket::getListener	./src/Socket.h	/^    SocketListener *getListener();$/;"	p	class:Socket	access:public	signature:()
Socket::getPeerName	./src/Socket.h	/^    const char* getPeerName()$/;"	f	class:Socket	access:public	signature:()
Socket::getSD	./src/Socket.cpp	/^int Socket::getSD()$/;"	f	class:Socket	signature:()
Socket::getSD	./src/Socket.h	/^    int getSD();$/;"	p	class:Socket	access:public	signature:()
Socket::host	./src/Socket.h	/^    const char *host;$/;"	m	class:Socket	access:protected
Socket::listener	./src/Socket.h	/^    SocketListener *listener;$/;"	m	class:Socket	access:protected
Socket::port	./src/Socket.h	/^    int sd, port;$/;"	m	class:Socket	access:protected
Socket::process	./src/Socket.cpp	/^void Socket::process()$/;"	f	class:Socket	signature:()
Socket::process	./src/Socket.h	/^    virtual void process();$/;"	p	class:Socket	access:public	signature:()
Socket::read	./src/Socket.cpp	/^int Socket::read(string &str)$/;"	f	class:Socket	signature:(string &str)
Socket::read	./src/Socket.h	/^    int read(bvector &vBuf, int nCount = 1048);$/;"	p	class:Socket	access:public	signature:(bvector &vBuf, int nCount = 1048)
Socket::read	./src/Socket.h	/^    int read(string &);$/;"	p	class:Socket	access:public	signature:(string &)
Socket::read_raw	./src/Socket.cpp	/^int Socket::read_raw(void *buffer, int buf_size)$/;"	f	class:Socket	signature:(void *buffer, int buf_size)
Socket::read_raw	./src/Socket.h	/^    int read_raw(void *, int);$/;"	p	class:Socket	access:protected	signature:(void *, int)
Socket::sd	./src/Socket.h	/^    int sd, port;$/;"	m	class:Socket	access:protected
Socket::setListener	./src/Socket.cpp	/^void Socket::setListener(SocketListener *listener)$/;"	f	class:Socket	signature:(SocketListener *listener)
Socket::setListener	./src/Socket.h	/^    void setListener(SocketListener *);$/;"	p	class:Socket	access:public	signature:(SocketListener *)
Socket::write	./src/Socket.cpp	/^int Socket::write(const string &str, bool appendNullByte)$/;"	f	class:Socket	signature:(const string &str, bool appendNullByte)
Socket::write	./src/Socket.h	/^    int write(bvector &vBuf, int nStart = 0, int nCount = 0);$/;"	p	class:Socket	access:public	signature:(bvector &vBuf, int nStart = 0, int nCount = 0)
Socket::write	./src/Socket.h	/^    int write(const string &, bool appendNullByte = false);$/;"	p	class:Socket	access:public	signature:(const string &, bool appendNullByte = false)
Socket::write_raw	./src/Socket.cpp	/^int Socket::write_raw(const void *data, int len)$/;"	f	class:Socket	signature:(const void *data, int len)
Socket::write_raw	./src/Socket.h	/^    int write_raw(const void *, int);$/;"	p	class:Socket	access:protected	signature:(const void *, int)
Socket::~Socket	./src/Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
Socket::~Socket	./src/Socket.h	/^    virtual ~Socket();$/;"	p	class:Socket	access:public	signature:()
SocketHandler	./src/SocketHandler.h	/^class SocketHandler$/;"	c
SocketHandler::addSocket	./src/SocketHandler.cpp	/^void SocketHandler::addSocket(string uid, Socket *socket)$/;"	f	class:SocketHandler	signature:(string uid, Socket *socket)
SocketHandler::addSocket	./src/SocketHandler.h	/^    static void addSocket(string uid, Socket *s);$/;"	p	class:SocketHandler	access:public	signature:(string uid, Socket *s)
SocketHandler::alreadyRunning	./src/SocketHandler.cpp	/^bool SocketHandler::alreadyRunning = false;$/;"	m	class:SocketHandler	file:
SocketHandler::alreadyRunning	./src/SocketHandler.h	/^    static bool alreadyRunning;$/;"	m	class:SocketHandler	access:private
SocketHandler::removeSocket	./src/SocketHandler.cpp	/^void SocketHandler::removeSocket(string uid)$/;"	f	class:SocketHandler	signature:(string uid)
SocketHandler::removeSocket	./src/SocketHandler.h	/^    static void removeSocket(string uid);$/;"	p	class:SocketHandler	access:public	signature:(string uid)
SocketHandler::runLoop	./src/SocketHandler.cpp	/^void SocketHandler::runLoop()$/;"	f	class:SocketHandler	signature:()
SocketHandler::runLoop	./src/SocketHandler.h	/^    static void runLoop();$/;"	p	class:SocketHandler	access:public	signature:()
SocketHandler::sockets	./src/SocketHandler.cpp	/^map<string, Socket *> SocketHandler::sockets;$/;"	m	class:SocketHandler	file:
SocketHandler::sockets	./src/SocketHandler.h	/^    static map<string, Socket *> sockets;$/;"	m	class:SocketHandler	access:private
SocketListener	./src/Socket.h	/^class SocketListener$/;"	c
SocketListener::connected	./src/Socket.h	/^    virtual void connected() = 0;$/;"	p	class:SocketListener	access:public	signature:()
SocketListener::disconnected	./src/Socket.h	/^    virtual void disconnected(const string &) = 0;$/;"	p	class:SocketListener	access:public	signature:(const string &)
SocketListener::recv	./src/Socket.h	/^    virtual void recv(string &) = 0;$/;"	p	class:SocketListener	access:public	signature:(string &)
SrProcessor	./src/SrProcessor.h	/^class SrProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
SrProcessor::process	./src/SrProcessor.h	/^    string process(Match *m, PElement, Responder *, const string &id)$/;"	f	class:SrProcessor	access:public	signature:(Match *m, PElement, Responder *, const string &id)
SrProcessor::~SrProcessor	./src/SrProcessor.h	/^    ~SrProcessor() { }$/;"	f	class:SrProcessor	access:public	signature:()
SraiProcessor	./src/SraiProcessor.h	/^class SraiProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
SraiProcessor::process	./src/SraiProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SraiProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
SraiProcessor::~SraiProcessor	./src/SraiProcessor.h	/^    ~SraiProcessor() { }$/;"	f	class:SraiProcessor	access:public	signature:()
StarProcessor	./src/StarProcessor.h	/^class StarProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
StarProcessor::process	./src/StarProcessor.h	/^    string process(Match *m, PElement e, Responder *, const string &)$/;"	f	class:StarProcessor	access:public	signature:(Match *m, PElement e, Responder *, const string &)
StarProcessor::~StarProcessor	./src/StarProcessor.h	/^    ~StarProcessor() { }$/;"	f	class:StarProcessor	access:public	signature:()
Stream	./src/Stream.h	/^class Stream$/;"	c
Stream::Read	./src/Stream.cpp	/^void Stream::Read(const char *str)$/;"	f	class:Stream	signature:(const char *str)
Stream::Read	./src/Stream.h	/^    virtual void Read(const char *str);$/;"	p	class:Stream	access:public	signature:(const char *str)
Stream::Write	./src/Stream.cpp	/^void Stream::Write(const char *str)$/;"	f	class:Stream	signature:(const char *str)
Stream::Write	./src/Stream.h	/^    virtual void Write(const char *str);$/;"	p	class:Stream	access:public	signature:(const char *str)
StreamProvider	./src/Stream.h	/^class StreamProvider$/;"	c
StreamProvider::getStream	./src/Stream.cpp	/^Stream *StreamProvider::getStream(const char *strName)$/;"	f	class:StreamProvider	signature:(const char *strName)
StreamProvider::getStream	./src/Stream.h	/^    virtual Stream *getStream(const char *str);$/;"	p	class:StreamProvider	access:public	signature:(const char *str)
StringTokenizer	./src/StringTokenizer.h	/^    StringTokenizer(const string &s, const string &d = " \\t\\n\\r", bool rt = false) :$/;"	f	class:StringTokenizer	access:public	signature:(const string &s, const string &d = Ó, bool rt = false)
StringTokenizer	./src/StringTokenizer.h	/^class StringTokenizer$/;"	c
StringTokenizer::StringTokenizer	./src/StringTokenizer.h	/^    StringTokenizer(const string &s, const string &d = " \\t\\n\\r", bool rt = false) :$/;"	f	class:StringTokenizer	access:public	signature:(const string &s, const string &d = Ó, bool rt = false)
StringTokenizer::countTokens	./src/StringTokenizer.cpp	/^int StringTokenizer::countTokens()$/;"	f	class:StringTokenizer	signature:()
StringTokenizer::countTokens	./src/StringTokenizer.h	/^    int countTokens();$/;"	p	class:StringTokenizer	access:public	signature:()
StringTokenizer::currentPosition	./src/StringTokenizer.h	/^    int currentPosition;$/;"	m	class:StringTokenizer	access:private
StringTokenizer::delim	./src/StringTokenizer.h	/^    string delim;$/;"	m	class:StringTokenizer	access:private
StringTokenizer::hasMoreTokens	./src/StringTokenizer.cpp	/^bool StringTokenizer::hasMoreTokens()$/;"	f	class:StringTokenizer	signature:()
StringTokenizer::hasMoreTokens	./src/StringTokenizer.h	/^    bool hasMoreTokens();$/;"	p	class:StringTokenizer	access:public	signature:()
StringTokenizer::maxPosition	./src/StringTokenizer.h	/^    int maxPosition;$/;"	m	class:StringTokenizer	access:private
StringTokenizer::nextToken	./src/StringTokenizer.cpp	/^string StringTokenizer::nextToken()$/;"	f	class:StringTokenizer	signature:()
StringTokenizer::nextToken	./src/StringTokenizer.cpp	/^string StringTokenizer::nextToken(const string &d)$/;"	f	class:StringTokenizer	signature:(const string &d)
StringTokenizer::nextToken	./src/StringTokenizer.h	/^    string nextToken();$/;"	p	class:StringTokenizer	access:public	signature:()
StringTokenizer::nextToken	./src/StringTokenizer.h	/^    string nextToken(const string &d);$/;"	p	class:StringTokenizer	access:public	signature:(const string &d)
StringTokenizer::reset	./src/StringTokenizer.h	/^    void reset()$/;"	f	class:StringTokenizer	access:public	signature:()
StringTokenizer::retTok	./src/StringTokenizer.h	/^    bool retTok;$/;"	m	class:StringTokenizer	access:private
StringTokenizer::skipDelimiters	./src/StringTokenizer.cpp	/^void StringTokenizer::skipDelimiters()$/;"	f	class:StringTokenizer	signature:()
StringTokenizer::skipDelimiters	./src/StringTokenizer.h	/^    void skipDelimiters();$/;"	p	class:StringTokenizer	access:private	signature:()
StringTokenizer::str	./src/StringTokenizer.h	/^    string str;$/;"	m	class:StringTokenizer	access:private
StringTokenizer::tail	./src/StringTokenizer.h	/^    string tail()$/;"	f	class:StringTokenizer	access:public	signature:()
SubTree	./src/Substituter.h	/^    SubTree()$/;"	f	class:SubTree	access:public	signature:()
SubTree	./src/Substituter.h	/^class SubTree$/;"	c
SubTree::SubTree	./src/Substituter.h	/^    SubTree()$/;"	f	class:SubTree	access:public	signature:()
SubTree::addChild	./src/Substituter.h	/^    void addChild(string find, string replace)$/;"	f	class:SubTree	access:public	signature:(string find, string replace)
SubTree::root	./src/Substituter.h	/^    Node *root;$/;"	m	class:SubTree	access:public
SubstituteProcessor	./src/SubstituteProcessor.h	/^class SubstituteProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
SubstituteProcessor::process	./src/SubstituteProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SubstituteProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
SubstituteProcessor::~SubstituteProcessor	./src/SubstituteProcessor.h	/^    ~SubstituteProcessor() { }$/;"	f	class:SubstituteProcessor	access:public	signature:()
Substituter	./src/Substituter.cpp	/^Substituter::Substituter()$/;"	f	class:Substituter	signature:()
Substituter	./src/Substituter.h	/^    Substituter();$/;"	p	class:Substituter	access:public	signature:()
Substituter	./src/Substituter.h	/^class Substituter$/;"	c
Substituter::Substituter	./src/Substituter.cpp	/^Substituter::Substituter()$/;"	f	class:Substituter	signature:()
Substituter::Substituter	./src/Substituter.h	/^    Substituter();$/;"	p	class:Substituter	access:public	signature:()
Substituter::addSubstitute	./src/Substituter.cpp	/^void Substituter::addSubstitute(const string &name, const string &find, const string &replace)$/;"	f	class:Substituter	signature:(const string &name, const string &find, const string &replace)
Substituter::addSubstitute	./src/Substituter.h	/^    static void addSubstitute(const string &, const string &, const string &);$/;"	p	class:Substituter	access:public	signature:(const string &, const string &, const string &)
Substituter::getSubstituter	./src/Substituter.cpp	/^SubTree Substituter::getSubstituter(const string &name)$/;"	f	class:Substituter	signature:(const string &name)
Substituter::getSubstituter	./src/Substituter.h	/^    static SubTree getSubstituter(const string &);$/;"	p	class:Substituter	access:public	signature:(const string &)
Substituter::replace	./src/Substituter.cpp	/^string Substituter::replace(SubTree tree, const string &input)$/;"	f	class:Substituter	signature:(SubTree tree, const string &input)
Substituter::replace	./src/Substituter.h	/^    static string replace(SubTree, const string &);$/;"	p	class:Substituter	access:public	signature:(SubTree, const string &)
Substituter::substitute	./src/Substituter.cpp	/^string Substituter::substitute(const string &input, const string &subs)$/;"	f	class:Substituter	signature:(const string &input, const string &subs)
Substituter::substitute	./src/Substituter.h	/^    static string substitute(const string &, const string &subs = "normal");$/;"	p	class:Substituter	access:public	signature:(const string &, const string &subs = Ó)
Substituter::substituters	./src/Substituter.h	/^    static map<string, SubTree> substituters;$/;"	m	class:Substituter	access:public
SystemProcessor	./src/SystemProcessor.h	/^class SystemProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
SystemProcessor::process	./src/SystemProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SystemProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
TEMPLATE_H	./src/Template.h	2;"	d
TEMPLATE_PROCESSOR_H	./src/TemplateProcessor.h	7;"	d
THAT	./src/Kernel.cpp	/^const int Kernel::THAT = 3;$/;"	m	class:Kernel	file:
THAT	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
THATSTAR_PROCESSOR_H	./src/ThatstarProcessor.h	10;"	d
THAT_PROCESSOR_H	./src/ThatProcessor.h	10;"	d
THINK_PROCESSOR_H	./src/ThinkProcessor.h	7;"	d
TIME_KEEPER_H	./src/TimeKeeper.h	5;"	d
TOKEN_PROXY_LISTENER_H	./src/TokenProxyListener.h	5;"	d
TOPIC	./src/Kernel.cpp	/^const int Kernel::TOPIC = 4;$/;"	m	class:Kernel	file:
TOPIC	./src/Kernel.h	/^    static const int CONTEXT, INPUT, THAT, TOPIC;$/;"	m	class:Kernel	access:private
TOPICSTAR_PROCESSOR_H	./src/TopicstarProcessor.h	10;"	d
Template	./src/Template.h	/^    Template(const string &fn, streamsize st, streamsize ed)$/;"	f	class:Template	access:public	signature:(const string &fn, streamsize st, streamsize ed)
Template	./src/Template.h	/^class Template$/;"	c
Template::Template	./src/Template.h	/^    Template(const string &fn, streamsize st, streamsize ed)$/;"	f	class:Template	access:public	signature:(const string &fn, streamsize st, streamsize ed)
Template::end	./src/Template.h	/^    streamsize start, end;$/;"	m	class:Template	access:private
Template::fetch	./src/Template.cpp	/^string Template::fetch()$/;"	f	class:Template	signature:()
Template::fetch	./src/Template.h	/^    string fetch();$/;"	p	class:Template	access:public	signature:()
Template::filenameIx	./src/Template.h	/^    int filenameIx;$/;"	m	class:Template	access:public
Template::filenames	./src/Template.cpp	/^vector<string> Template::filenames;$/;"	m	class:Template	file:
Template::filenames	./src/Template.h	/^    static vector<string> filenames;$/;"	m	class:Template	access:private
Template::filesizes	./src/Template.cpp	/^vector<long> Template::filesizes;$/;"	m	class:Template	file:
Template::filesizes	./src/Template.h	/^    static vector<long> filesizes;$/;"	m	class:Template	access:private
Template::getFilename	./src/Template.cpp	/^const char *Template::getFilename(int index)$/;"	f	class:Template	signature:(int index)
Template::getFilename	./src/Template.cpp	/^string Template::getFilename()$/;"	f	class:Template	signature:()
Template::getFilename	./src/Template.h	/^    static const char *getFilename(int index);$/;"	p	class:Template	access:private	signature:(int index)
Template::getFilename	./src/Template.h	/^    string getFilename();$/;"	p	class:Template	access:public	signature:()
Template::reloadFile	./src/Template.cpp	/^void Template::reloadFile(int index)$/;"	f	class:Template	signature:(int index)
Template::reloadFile	./src/Template.h	/^    static void reloadFile(int index);$/;"	p	class:Template	access:public	signature:(int index)
Template::start	./src/Template.h	/^    streamsize start, end;$/;"	m	class:Template	access:private
TemplateProcessor	./src/TemplateProcessor.h	/^class TemplateProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
TemplateProcessor::checkCompatibility	./src/TemplateProcessor.cpp	/^PElement TemplateProcessor::checkCompatibility(PElement e)$/;"	f	class:TemplateProcessor	signature:(PElement e)
TemplateProcessor::checkCompatibility	./src/TemplateProcessor.h	/^    static PElement checkCompatibility(PElement);$/;"	p	class:TemplateProcessor	access:private	signature:(PElement)
TemplateProcessor::getProcessor	./src/TemplateProcessor.cpp	/^AimlProcessor *TemplateProcessor::getProcessor(const string &name)$/;"	f	class:TemplateProcessor	signature:(const string &name)
TemplateProcessor::getProcessor	./src/TemplateProcessor.h	/^    static AimlProcessor *getProcessor(const string &name);$/;"	p	class:TemplateProcessor	access:public	signature:(const string &name)
TemplateProcessor::hook	./src/TemplateProcessor.h	/^    static AimlProcessor *hook;$/;"	m	class:TemplateProcessor	access:private
TemplateProcessor::process	./src/TemplateProcessor.cpp	/^string TemplateProcessor::process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:TemplateProcessor	signature:(Match *m, PElement e, Responder *r, const string &id)
TemplateProcessor::process	./src/TemplateProcessor.h	/^    string process(Match *, PElement, Responder *, const string &);$/;"	p	class:TemplateProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
TemplateProcessor::processTemplate	./src/TemplateProcessor.cpp	/^string TemplateProcessor::processTemplate(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:TemplateProcessor	signature:(Match *m, PElement e, Responder *r, const string &id)
TemplateProcessor::processTemplate	./src/TemplateProcessor.h	/^    static string processTemplate(Match *, PElement, Responder *, const string &id);$/;"	p	class:TemplateProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
TemplateProcessor::~TemplateProcessor	./src/TemplateProcessor.cpp	/^TemplateProcessor::~TemplateProcessor()$/;"	f	class:TemplateProcessor	signature:()
TemplateProcessor::~TemplateProcessor	./src/TemplateProcessor.h	/^    ~TemplateProcessor();$/;"	p	class:TemplateProcessor	access:public	signature:()
ThatProcessor	./src/ThatProcessor.h	/^class ThatProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
ThatProcessor::process	./src/ThatProcessor.h	/^    string process(Match *, PElement e, Responder *, const string &id)$/;"	f	class:ThatProcessor	access:public	signature:(Match *, PElement e, Responder *, const string &id)
ThatProcessor::~ThatProcessor	./src/ThatProcessor.h	/^    ~ThatProcessor() { }$/;"	f	class:ThatProcessor	access:public	signature:()
ThatstarProcessor	./src/ThatstarProcessor.h	/^class ThatstarProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
ThatstarProcessor::process	./src/ThatstarProcessor.h	/^    string process(Match *m, PElement e, Responder *, const string &)$/;"	f	class:ThatstarProcessor	access:public	signature:(Match *m, PElement e, Responder *, const string &)
ThatstarProcessor::~ThatstarProcessor	./src/ThatstarProcessor.h	/^    ~ThatstarProcessor() { }$/;"	f	class:ThatstarProcessor	access:public	signature:()
ThinkProcessor	./src/ThinkProcessor.h	/^class ThinkProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
ThinkProcessor::process	./src/ThinkProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ThinkProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
ThinkProcessor::~ThinkProcessor	./src/ThinkProcessor.h	/^    ~ThinkProcessor() { }$/;"	f	class:ThinkProcessor	access:public	signature:()
TimeQueue	./src/TimeKeeper.h	/^typedef priority_queue<TimedEvent *, vector<TimedEvent *>, tComp> TimeQueue;$/;"	t
TimedEvent	./src/TimeKeeper.h	/^    TimedEvent(long t, Event *e)$/;"	f	class:TimedEvent	access:public	signature:(long t, Event *e)
TimedEvent	./src/TimeKeeper.h	/^class TimedEvent$/;"	c
TimedEvent::TimedEvent	./src/TimeKeeper.h	/^    TimedEvent(long t, Event *e)$/;"	f	class:TimedEvent	access:public	signature:(long t, Event *e)
TimedEvent::event	./src/TimeKeeper.h	/^    Event *event;$/;"	m	class:TimedEvent	access:private
TimedEvent::getTime	./src/TimeKeeper.h	/^    long getTime() const$/;"	f	class:TimedEvent	access:public	signature:() const
TimedEvent::run	./src/TimeKeeper.h	/^    void run()$/;"	f	class:TimedEvent	access:public	signature:()
TimedEvent::time	./src/TimeKeeper.h	/^    long time;$/;"	m	class:TimedEvent	access:private
Timer	./src/TimeKeeper.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer	./src/TimeKeeper.h	/^    Timer();$/;"	p	class:Timer	access:public	signature:()
Timer	./src/TimeKeeper.h	/^class Timer$/;"	c
Timer::Timer	./src/TimeKeeper.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer::Timer	./src/TimeKeeper.h	/^    Timer();$/;"	p	class:Timer	access:public	signature:()
Timer::addEvent	./src/TimeKeeper.cpp	/^void Timer::addEvent(TimedEvent *te)$/;"	f	class:Timer	signature:(TimedEvent *te)
Timer::addEvent	./src/TimeKeeper.cpp	/^void Timer::addEvent(long t, Event *e)$/;"	f	class:Timer	signature:(long t, Event *e)
Timer::addEvent	./src/TimeKeeper.h	/^    void addEvent(TimedEvent *);$/;"	p	class:Timer	access:public	signature:(TimedEvent *)
Timer::addEvent	./src/TimeKeeper.h	/^    void addEvent(long, Event *);$/;"	p	class:Timer	access:public	signature:(long, Event *)
Timer::processPending	./src/TimeKeeper.cpp	/^void Timer::processPending()$/;"	f	class:Timer	signature:()
Timer::processPending	./src/TimeKeeper.h	/^    void processPending();$/;"	p	class:Timer	access:public	signature:()
Timer::tq	./src/TimeKeeper.h	/^    TimeQueue tq;$/;"	m	class:Timer	access:private
TokenProxyListener	./src/TokenProxyListener.cpp	/^TokenProxyListener::TokenProxyListener(SocketListener *sl, const string &token)$/;"	f	class:TokenProxyListener	signature:(SocketListener *sl, const string &token)
TokenProxyListener	./src/TokenProxyListener.h	/^    TokenProxyListener(SocketListener *, const string &token = "\\n");$/;"	p	class:TokenProxyListener	access:public	signature:(SocketListener *, const string &token = Ó)
TokenProxyListener	./src/TokenProxyListener.h	/^class TokenProxyListener : public SocketListener$/;"	c	inherits:SocketListener
TokenProxyListener::TokenProxyListener	./src/TokenProxyListener.cpp	/^TokenProxyListener::TokenProxyListener(SocketListener *sl, const string &token)$/;"	f	class:TokenProxyListener	signature:(SocketListener *sl, const string &token)
TokenProxyListener::TokenProxyListener	./src/TokenProxyListener.h	/^    TokenProxyListener(SocketListener *, const string &token = "\\n");$/;"	p	class:TokenProxyListener	access:public	signature:(SocketListener *, const string &token = Ó)
TokenProxyListener::buffer	./src/TokenProxyListener.h	/^    string separator, buffer;$/;"	m	class:TokenProxyListener	access:private
TokenProxyListener::connected	./src/TokenProxyListener.h	/^    void connected()$/;"	f	class:TokenProxyListener	access:public	signature:()
TokenProxyListener::disconnected	./src/TokenProxyListener.h	/^    void disconnected(const string &msg)$/;"	f	class:TokenProxyListener	access:public	signature:(const string &msg)
TokenProxyListener::forward	./src/TokenProxyListener.h	/^    SocketListener *forward;$/;"	m	class:TokenProxyListener	access:private
TokenProxyListener::recv	./src/TokenProxyListener.cpp	/^void TokenProxyListener::recv(string &str)$/;"	f	class:TokenProxyListener	signature:(string &str)
TokenProxyListener::recv	./src/TokenProxyListener.h	/^    void recv(string &);$/;"	p	class:TokenProxyListener	access:public	signature:(string &)
TokenProxyListener::separator	./src/TokenProxyListener.h	/^    string separator, buffer;$/;"	m	class:TokenProxyListener	access:private
TokenProxyListener::~TokenProxyListener	./src/TokenProxyListener.h	/^    virtual ~TokenProxyListener() { }$/;"	f	class:TokenProxyListener	access:public	signature:()
TopicstarProcessor	./src/TopicstarProcessor.h	/^class TopicstarProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
TopicstarProcessor::process	./src/TopicstarProcessor.h	/^    string process(Match *m, PElement e, Responder *, const string &)$/;"	f	class:TopicstarProcessor	access:public	signature:(Match *m, PElement e, Responder *, const string &)
TopicstarProcessor::~TopicstarProcessor	./src/TopicstarProcessor.h	/^    ~TopicstarProcessor() { }$/;"	f	class:TopicstarProcessor	access:public	signature:()
UBUNTU_VERSION_STYLE	./version.h	/^	static const char UBUNTU_VERSION_STYLE[] = "15.01";$/;"	m	namespace:AutoVersion
UPPERCASE_PROCESSOR_H	./src/UppercaseProcessor.h	7;"	d
UTILS_H	./src/Utils.h	10;"	d
UpdateTabEvent	./src/wxwindows.h	/^    UpdateTabEvent(const string &name, const string &text, bool read)$/;"	f	class:UpdateTabEvent	access:public	signature:(const string &name, const string &text, bool read)
UpdateTabEvent	./src/wxwindows.h	/^class UpdateTabEvent : public wxEvent$/;"	c	inherits:wxEvent
UpdateTabEvent::Clone	./src/wxwindows.h	/^    virtual wxEvent *Clone() const$/;"	f	class:UpdateTabEvent	access:public	signature:() const
UpdateTabEvent::UpdateTabEvent	./src/wxwindows.h	/^    UpdateTabEvent(const string &name, const string &text, bool read)$/;"	f	class:UpdateTabEvent	access:public	signature:(const string &name, const string &text, bool read)
UpdateTabEvent::name	./src/wxwindows.h	/^    string name, text;$/;"	m	class:UpdateTabEvent	access:public
UpdateTabEvent::read	./src/wxwindows.h	/^    bool read;$/;"	m	class:UpdateTabEvent	access:public
UpdateTabEvent::text	./src/wxwindows.h	/^    string name, text;$/;"	m	class:UpdateTabEvent	access:public
UppercaseProcessor	./src/UppercaseProcessor.h	/^class UppercaseProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
UppercaseProcessor::process	./src/UppercaseProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:UppercaseProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
UppercaseProcessor::~UppercaseProcessor	./src/UppercaseProcessor.h	/^    ~UppercaseProcessor() { }$/;"	f	class:UppercaseProcessor	access:public	signature:()
VERSION_H	./version.h	2;"	d
VERSION_PROCESSOR_H	./src/VersionProcessor.h	2;"	d
VERSION_STRING	./src/VersionProcessor.h	8;"	d
VersionProcessor	./src/VersionProcessor.h	/^class VersionProcessor : public AimlProcessor$/;"	c	inherits:AimlProcessor
VersionProcessor::process	./src/VersionProcessor.h	/^    string process(Match *, PElement, Responder *, const string &)$/;"	f	class:VersionProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
VersionProcessor::~VersionProcessor	./src/VersionProcessor.h	/^    ~VersionProcessor() { }$/;"	f	class:VersionProcessor	access:public	signature:()
WEBSOCKETS	./src/websocket.h	2;"	d
WXUNUSED	./src/wxwindows.cpp	/^void JFrame::OnAbout(wxCommandEvent& WXUNUSED(event))$/;"	f	class:JFrame	signature:(event)
WXUNUSED	./src/wxwindows.cpp	/^void JFrame::OnExit(wxCommandEvent& WXUNUSED(event))$/;"	f	class:JFrame	signature:(event)
WXUNUSED	./src/wxwindows.h	/^    void OnAbout(wxCommandEvent& WXUNUSED(event));$/;"	p	class:JFrame	access:public	signature:(event)
WXUNUSED	./src/wxwindows.h	/^    void OnExit(wxCommandEvent& WXUNUSED(event));$/;"	p	class:JFrame	access:public	signature:(event)
WXWINDOWS_H	./src/wxwindows.h	6;"	d
WebSocketServer	./src/websocket.h	/^class WebSocketServer$/;"	c
WebSocketServer::addWS	./src/websocket.cpp	/^void WebSocketServer::addWS(int sd,string key)$/;"	f	class:WebSocketServer	signature:(int sd,string key)
WebSocketServer::addWS	./src/websocket.h	/^    static void addWS(int sd,string key);$/;"	p	class:WebSocketServer	access:public	signature:(int sd,string key)
WebSocketServer::base64_chars	./src/websocket.cpp	/^const string WebSocketServer::base64_chars= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";;$/;"	m	class:WebSocketServer	file:
WebSocketServer::base64_chars	./src/websocket.h	/^    static const string base64_chars;$/;"	m	class:WebSocketServer	access:public
WebSocketServer::base64_encode	./src/websocket.cpp	/^string WebSocketServer::base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len)$/;"	f	class:WebSocketServer	signature:(unsigned char const* bytes_to_encode, unsigned int in_len)
WebSocketServer::base64_encode	./src/websocket.h	/^    static string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len);$/;"	p	class:WebSocketServer	access:public	signature:(unsigned char const* bytes_to_encode, unsigned int in_len)
WebSocketServer::checkHandshake	./src/websocket.cpp	/^bool WebSocketServer::checkHandshake(int sd, string recieved)$/;"	f	class:WebSocketServer	signature:(int sd, string recieved)
WebSocketServer::checkHandshake	./src/websocket.h	/^    static bool checkHandshake(int sd, string recieved);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, string recieved)
WebSocketServer::commands	./src/websocket.cpp	/^void WebSocketServer::commands(int sd, char message[1024])$/;"	f	class:WebSocketServer	signature:(int sd, char message[1024])
WebSocketServer::commands	./src/websocket.h	/^    void commands(int sd, char message[1024]);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, char message[1024])
WebSocketServer::decode	./src/websocket.cpp	/^string WebSocketServer::decode(const char* buffer)$/;"	f	class:WebSocketServer	signature:(const char* buffer)
WebSocketServer::decode	./src/websocket.h	/^    static string decode(const char* buffer);$/;"	p	class:WebSocketServer	access:public	signature:(const char* buffer)
WebSocketServer::encode	./src/websocket.cpp	/^string WebSocketServer::encode(const char* message)$/;"	f	class:WebSocketServer	signature:(const char* message)
WebSocketServer::encode	./src/websocket.h	/^    static string encode(const char* message);$/;"	p	class:WebSocketServer	access:public	signature:(const char* message)
WebSocketServer::getKey	./src/websocket.cpp	/^string WebSocketServer::getKey(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
WebSocketServer::getKey	./src/websocket.h	/^    static string getKey(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
WebSocketServer::isWS	./src/websocket.cpp	/^bool WebSocketServer::isWS(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
WebSocketServer::isWS	./src/websocket.h	/^    static bool isWS(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
WebSocketServer::master_socket	./src/websocket.cpp	/^int WebSocketServer::master_socket;$/;"	m	class:WebSocketServer	file:
WebSocketServer::master_socket	./src/websocket.h	/^    static int master_socket;$/;"	m	class:WebSocketServer	access:private
WebSocketServer::removeWS	./src/websocket.cpp	/^void WebSocketServer::removeWS(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
WebSocketServer::removeWS	./src/websocket.h	/^    static void removeWS(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
WebSocketServer::replyHandshake	./src/websocket.cpp	/^bool WebSocketServer::replyHandshake(int sd, string webkey)$/;"	f	class:WebSocketServer	signature:(int sd, string webkey)
WebSocketServer::replyHandshake	./src/websocket.h	/^    static bool replyHandshake(int sd,string webkey);$/;"	p	class:WebSocketServer	access:public	signature:(int sd,string webkey)
WebSocketServer::sendMessage	./src/websocket.cpp	/^void WebSocketServer::sendMessage(int sd, string msg)$/;"	f	class:WebSocketServer	signature:(int sd, string msg)
WebSocketServer::sendMessage	./src/websocket.h	/^    static void sendMessage(int sd, string msg);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, string msg)
WebSocketServer::sendToAll	./src/websocket.cpp	/^void WebSocketServer::sendToAll(int sd, const char message[1024])$/;"	f	class:WebSocketServer	signature:(int sd, const char message[1024])
WebSocketServer::sendToAll	./src/websocket.h	/^    static void sendToAll(int sd, const char message[1024]);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, const char message[1024])
WebSocketServer::setConnected	./src/websocket.cpp	/^bool WebSocketServer::setConnected(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
WebSocketServer::setConnected	./src/websocket.h	/^    static bool setConnected(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
WebSocketServer::test	./src/websocket.cpp	/^bool WebSocketServer::test(){$/;"	f	class:WebSocketServer	signature:()
WebSocketServer::test	./src/websocket.h	/^    static bool test();$/;"	p	class:WebSocketServer	access:public	signature:()
WebSocketServer::websocks	./src/websocket.cpp	/^map<int,string> WebSocketServer::websocks;$/;"	m	class:WebSocketServer	file:
WebSocketServer::websocks	./src/websocket.h	/^    static map<int,string> websocks;$/;"	m	class:WebSocketServer	access:public
Write	./src/Stream.cpp	/^void Stream::Write(const char *str)$/;"	f	class:Stream	signature:(const char *str)
Write	./src/Stream.h	/^    virtual void Write(const char *str);$/;"	p	class:Stream	access:public	signature:(const char *str)
Write	./src/wxwindows.h	/^    void Write(const char *cs)$/;"	f	class:GuiStream	access:public	signature:(const char *cs)
XML_SOCKET_RESPONDER_H	./src/XmlSocketResponder.h	5;"	d
XP_BEOS	./src/JavaScriptProcessor.h	28;"	d
XP_MAC	./src/JavaScriptProcessor.h	33;"	d
XP_PC	./src/JavaScriptProcessor.h	30;"	d
XP_UNIX	./src/JavaScriptProcessor.h	35;"	d
XP_WIN	./src/JavaScriptProcessor.h	31;"	d
XmlRpcConfig	./src/Config.h	/^} XmlRpcConfig;$/;"	t	typeref:struct:__anon7
XmlSocketProcessor	./src/XmlSocketResponder.cpp	/^XmlSocketProcessor::XmlSocketProcessor()$/;"	f	class:XmlSocketProcessor	signature:()
XmlSocketProcessor	./src/XmlSocketResponder.h	/^    XmlSocketProcessor();$/;"	p	class:XmlSocketProcessor	access:public	signature:()
XmlSocketProcessor	./src/XmlSocketResponder.h	/^class XmlSocketProcessor : public AimlProcessor,$/;"	c	inherits:AimlProcessor,ServerSocketListener
XmlSocketProcessor::XmlSocketProcessor	./src/XmlSocketResponder.cpp	/^XmlSocketProcessor::XmlSocketProcessor()$/;"	f	class:XmlSocketProcessor	signature:()
XmlSocketProcessor::XmlSocketProcessor	./src/XmlSocketResponder.h	/^    XmlSocketProcessor();$/;"	p	class:XmlSocketProcessor	access:public	signature:()
XmlSocketProcessor::awaitingClient	./src/XmlSocketResponder.cpp	/^void XmlSocketProcessor::awaitingClient(Socket *client)$/;"	f	class:XmlSocketProcessor	signature:(Socket *client)
XmlSocketProcessor::awaitingClient	./src/XmlSocketResponder.h	/^    void awaitingClient(Socket *);$/;"	p	class:XmlSocketProcessor	access:public	signature:(Socket *)
XmlSocketProcessor::getName	./src/XmlSocketResponder.h	/^    string getName() const$/;"	f	class:XmlSocketProcessor	access:public	signature:() const
XmlSocketProcessor::getVersion	./src/XmlSocketResponder.h	/^    string getVersion() const$/;"	f	class:XmlSocketProcessor	access:public	signature:() const
XmlSocketProcessor::port	./src/XmlSocketResponder.h	/^    int port;$/;"	m	class:XmlSocketProcessor	access:private
XmlSocketProcessor::process	./src/XmlSocketResponder.cpp	/^string XmlSocketProcessor::process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:XmlSocketProcessor	signature:(Match *m, PElement e, Responder *r, const string &id)
XmlSocketProcessor::process	./src/XmlSocketResponder.h	/^    string process(Match *, PElement, Responder *, const string &);$/;"	p	class:XmlSocketProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
XmlSocketProcessor::server	./src/XmlSocketResponder.h	/^    ServerSocket *server;$/;"	m	class:XmlSocketProcessor	access:private
XmlSocketProcessor::shutdown	./src/XmlSocketResponder.cpp	/^void XmlSocketProcessor::shutdown(const string &msg)$/;"	f	class:XmlSocketProcessor	signature:(const string &msg)
XmlSocketProcessor::shutdown	./src/XmlSocketResponder.h	/^    void shutdown(const string &);$/;"	p	class:XmlSocketProcessor	access:public	signature:(const string &)
XmlSocketProcessor::~XmlSocketProcessor	./src/XmlSocketResponder.h	/^    virtual ~XmlSocketProcessor() { }$/;"	f	class:XmlSocketProcessor	access:public	signature:()
XmlSocketResponder	./src/XmlSocketResponder.cpp	/^XmlSocketResponder::XmlSocketResponder(Socket *c)$/;"	f	class:XmlSocketResponder	signature:(Socket *c)
XmlSocketResponder	./src/XmlSocketResponder.h	/^    XmlSocketResponder(Socket *);$/;"	p	class:XmlSocketResponder	access:public	signature:(Socket *)
XmlSocketResponder	./src/XmlSocketResponder.h	/^class XmlSocketResponder : public Responder, public SocketListener$/;"	c	inherits:Responder,SocketListener
XmlSocketResponder::XmlSocketResponder	./src/XmlSocketResponder.cpp	/^XmlSocketResponder::XmlSocketResponder(Socket *c)$/;"	f	class:XmlSocketResponder	signature:(Socket *c)
XmlSocketResponder::XmlSocketResponder	./src/XmlSocketResponder.h	/^    XmlSocketResponder(Socket *);$/;"	p	class:XmlSocketResponder	access:public	signature:(Socket *)
XmlSocketResponder::botName	./src/XmlSocketResponder.h	/^    string botName;$/;"	m	class:XmlSocketResponder	access:private
XmlSocketResponder::buffer	./src/XmlSocketResponder.h	/^    string buffer;$/;"	m	class:XmlSocketResponder	access:private
XmlSocketResponder::client	./src/XmlSocketResponder.h	/^    Socket *client;$/;"	m	class:XmlSocketResponder	access:private
XmlSocketResponder::connected	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::connected()$/;"	f	class:XmlSocketResponder	signature:()
XmlSocketResponder::connected	./src/XmlSocketResponder.h	/^    void connected();$/;"	p	class:XmlSocketResponder	access:public	signature:()
XmlSocketResponder::disconnected	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::disconnected(const string &msg)$/;"	f	class:XmlSocketResponder	signature:(const string &msg)
XmlSocketResponder::disconnected	./src/XmlSocketResponder.h	/^    void disconnected(const string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(const string &)
XmlSocketResponder::recv	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::recv(string &s)$/;"	f	class:XmlSocketResponder	signature:(string &s)
XmlSocketResponder::recv	./src/XmlSocketResponder.h	/^    void recv(string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(string &)
XmlSocketResponder::respond	./src/XmlSocketResponder.cpp	/^string XmlSocketResponder::respond(Match *, PElement, const string &)$/;"	f	class:XmlSocketResponder	signature:(Match *, PElement, const string &)
XmlSocketResponder::respond	./src/XmlSocketResponder.h	/^    string respond(Match *, PElement, const string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(Match *, PElement, const string &)
XmlSocketResponder::send	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::send(const string &s)$/;"	f	class:XmlSocketResponder	signature:(const string &s)
XmlSocketResponder::send	./src/XmlSocketResponder.h	/^    void send(const string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(const string &)
XmlSocketResponder::~XmlSocketResponder	./src/XmlSocketResponder.h	/^    virtual ~XmlSocketResponder()$/;"	f	class:XmlSocketResponder	access:public	signature:()
YEAR	./version.h	/^	static const char YEAR[] = "2015";$/;"	m	namespace:AutoVersion
__anon1::elements	./src/PredicateEngine.h	/^    map<int, string> elements;$/;"	m	struct:__anon1	access:public
__anon1::size	./src/PredicateEngine.h	/^    int size;$/;"	m	struct:__anon1	access:public
__anon1::top	./src/PredicateEngine.h	/^    int top;$/;"	m	struct:__anon1	access:public
__anon2::elements	./src/PredicateEngine.h	/^    map<int, string> elements;$/;"	m	struct:__anon2	access:public
__anon2::number	./src/PredicateEngine.h	/^    int number;$/;"	m	struct:__anon2	access:public
__anon2::size	./src/PredicateEngine.h	/^    int size;$/;"	m	struct:__anon2	access:public
__anon4::element	./src/JavaScriptProcessor.h	/^    PElement element;$/;"	m	struct:__anon4	access:public
__anon4::id	./src/JavaScriptProcessor.h	/^    string id;$/;"	m	struct:__anon4	access:public
__anon4::match	./src/JavaScriptProcessor.h	/^    Match *match;$/;"	m	struct:__anon4	access:public
__anon4::responder	./src/JavaScriptProcessor.h	/^    Responder *responder;$/;"	m	struct:__anon4	access:public
__anon5::autoReconnect	./src/Config.h	/^    bool	autoReconnect;$/;"	m	struct:__anon5	access:public
__anon5::channels	./src/Config.h	/^    vector<string>	channels;$/;"	m	struct:__anon5	access:public
__anon5::description	./src/Config.h	/^    string	description;$/;"	m	struct:__anon5	access:public
__anon5::enabled	./src/Config.h	/^    bool	enabled;$/;"	m	struct:__anon5	access:public
__anon5::host	./src/Config.h	/^    string	host;$/;"	m	struct:__anon5	access:public
__anon5::maxRetries	./src/Config.h	/^    int		maxRetries;$/;"	m	struct:__anon5	access:public
__anon5::nicks	./src/Config.h	/^    vector<string>	nicks;$/;"	m	struct:__anon5	access:public
__anon5::patternPrefix	./src/Config.h	/^    string	patternPrefix;$/;"	m	struct:__anon5	access:public
__anon5::port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon5	access:public
__anon5::ptPort	./src/Config.h	/^    short	ptPort;$/;"	m	struct:__anon5	access:public
__anon5::startupPattern	./src/Config.h	/^    string	startupPattern;$/;"	m	struct:__anon5	access:public
__anon6::enabled	./src/Config.h	/^    bool	enabled;$/;"	m	struct:__anon6	access:public
__anon6::patternPrefix	./src/Config.h	/^    string	patternPrefix;$/;"	m	struct:__anon6	access:public
__anon6::port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon6	access:public
__anon6::startupPattern	./src/Config.h	/^    string	startupPattern;$/;"	m	struct:__anon6	access:public
__anon6::templateFile	./src/Config.h	/^    string	templateFile;$/;"	m	struct:__anon6	access:public
__anon7::enabled	./src/Config.h	/^    bool	enabled;$/;"	m	struct:__anon7	access:public
__anon7::patternPrefix	./src/Config.h	/^    string	patternPrefix;$/;"	m	struct:__anon7	access:public
__anon7::port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon7	access:public
__anon7::startupPattern	./src/Config.h	/^    string	startupPattern;$/;"	m	struct:__anon7	access:public
__anon8::password	./src/Config.h	/^    string	password;$/;"	m	struct:__anon8	access:public
__anon8::port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon8	access:public
__anon8::username	./src/Config.h	/^    string	username;$/;"	m	struct:__anon8	access:public
add	./src/Kernel.cpp	/^Nodemaster *Kernel::add(const string &context, const string &pattern, const string &that, const string &topic)$/;"	f	class:Kernel	signature:(const string &context, const string &pattern, const string &that, const string &topic)
add	./src/Kernel.h	/^    static Nodemaster * add(const string &context, const string &pattern, const string &that, const string &topic);$/;"	p	class:Kernel	access:public	signature:(const string &context, const string &pattern, const string &that, const string &topic)
addAuthenticatedUser	./src/SecureProcessor.h	/^    static void addAuthenticatedUser(const string &id)$/;"	f	class:SecureProcessor	access:public	signature:(const string &id)
addAuthor	./src/Nodemapper.h	/^    virtual void addAuthor(const string &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &)
addChild	./src/Element.cpp	/^void Element::addChild(PElement element)$/;"	f	class:Element	signature:(PElement element)
addChild	./src/Element.h	/^    void addChild(PElement);$/;"	p	class:Element	access:public	signature:(PElement)
addChild	./src/Nodemapper.h	/^    virtual void addChild(const string &, Nodemapper *) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &, Nodemapper *)
addChild	./src/Nodemaster.cpp	/^void Nodemaster::addChild(const string &key, Nodemaster *value)$/;"	f	class:Nodemaster	signature:(const string &key, Nodemaster *value)
addChild	./src/Nodemaster.h	/^    void addChild(const string &, Nodemaster *);$/;"	p	class:Nodemaster	access:public	signature:(const string &, Nodemaster *)
addChild	./src/Substituter.h	/^    void addChild(string find, string replace)$/;"	f	class:SubTree	access:public	signature:(string find, string replace)
addContextStar	./src/Match.cpp	/^void Match::addContextStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
addContextStar	./src/Match.h	/^    void addContextStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
addElement	./src/SaxParser.cpp	/^void SaxParser::addElement(vector<char> &vb, int index)$/;"	f	class:SaxParser	signature:(vector<char> &vb, int index)
addElement	./src/SaxParser.h	/^    void addElement(string &, int);$/;"	p	class:SaxParser	access:private	signature:(string &, int)
addElement	./src/SaxParser.h	/^    void addElement(vector<char> &, int);$/;"	p	class:SaxParser	access:private	signature:(vector<char> &, int)
addEvent	./src/TimeKeeper.cpp	/^void Timer::addEvent(TimedEvent *te)$/;"	f	class:Timer	signature:(TimedEvent *te)
addEvent	./src/TimeKeeper.cpp	/^void Timer::addEvent(long t, Event *e)$/;"	f	class:Timer	signature:(long t, Event *e)
addEvent	./src/TimeKeeper.h	/^    void addEvent(TimedEvent *);$/;"	p	class:Timer	access:public	signature:(TimedEvent *)
addEvent	./src/TimeKeeper.h	/^    void addEvent(long, Event *);$/;"	p	class:Timer	access:public	signature:(long, Event *)
addFilename	./src/Nodemapper.h	/^    virtual void addFilename(const string &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &)
addHistory	./src/PredicateEngine.cpp	/^void PredicateEngine::addHistory(const string &property, const string &id, const string &value)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &value)
addHistory	./src/PredicateEngine.h	/^    void addHistory(const string &property, const string &id, const string &value);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &value)
addInputStar	./src/Match.cpp	/^void Match::addInputStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
addInputStar	./src/Match.h	/^    void addInputStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
addPath	./src/Kernel.cpp	/^void Kernel::addPath(Match *m, const string &value, int state)$/;"	f	class:Kernel	signature:(Match *m, const string &value, int state)
addPath	./src/Kernel.h	/^    static void addPath(Match *, const string &, int);$/;"	p	class:Kernel	access:private	signature:(Match *, const string &, int)
addSocket	./src/SocketHandler.cpp	/^void SocketHandler::addSocket(string uid, Socket *socket)$/;"	f	class:SocketHandler	signature:(string uid, Socket *socket)
addSocket	./src/SocketHandler.h	/^    static void addSocket(string uid, Socket *s);$/;"	p	class:SocketHandler	access:public	signature:(string uid, Socket *s)
addStar	./src/Kernel.cpp	/^void Kernel::addStar(Match *m, const string &value, int state)$/;"	f	class:Kernel	signature:(Match *m, const string &value, int state)
addStar	./src/Kernel.h	/^    static void addStar(Match *, const string &, int);$/;"	p	class:Kernel	access:private	signature:(Match *, const string &, int)
addSubstitute	./src/Substituter.cpp	/^void Substituter::addSubstitute(const string &name, const string &find, const string &replace)$/;"	f	class:Substituter	signature:(const string &name, const string &find, const string &replace)
addSubstitute	./src/Substituter.h	/^    static void addSubstitute(const string &, const string &, const string &);$/;"	p	class:Substituter	access:public	signature:(const string &, const string &, const string &)
addTabbedPane	./src/wxwindows.cpp	/^void JFrame::addTabbedPane(wxEvent &evt)$/;"	f	class:JFrame	signature:(wxEvent &evt)
addTabbedPane	./src/wxwindows.h	/^    void addTabbedPane(wxEvent &evt);$/;"	p	class:JFrame	access:public	signature:(wxEvent &evt)
addTemplate	./src/Nodemapper.h	/^    virtual void addTemplate(const Template &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const Template &)
addTemplate	./src/Nodemaster.cpp	/^void Nodemaster::addTemplate(Template *t)$/;"	f	class:Nodemaster	signature:(Template *t)
addTemplate	./src/Nodemaster.h	/^    void addTemplate(Template *t);$/;"	p	class:Nodemaster	access:public	signature:(Template *t)
addThatStar	./src/Match.cpp	/^void Match::addThatStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
addThatStar	./src/Match.h	/^    void addThatStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
addTopicStar	./src/Match.cpp	/^void Match::addTopicStar(const string &s)$/;"	f	class:Match	signature:(const string &s)
addTopicStar	./src/Match.h	/^    void addTopicStar(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
addValue	./src/PredicateEngine.cpp	/^void PredicateEngine::addValue(const string &property, const string &id, const string &value)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &value)
addValue	./src/PredicateEngine.h	/^    void addValue(const string &property, const string &id, const string &value);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &value)
addWS	./src/websocket.cpp	/^void WebSocketServer::addWS(int sd,string key)$/;"	f	class:WebSocketServer	signature:(int sd,string key)
addWS	./src/websocket.h	/^    static void addWS(int sd,string key);$/;"	p	class:WebSocketServer	access:public	signature:(int sd,string key)
alreadyRunning	./src/SocketHandler.cpp	/^bool SocketHandler::alreadyRunning = false;$/;"	m	class:SocketHandler	file:
alreadyRunning	./src/SocketHandler.h	/^    static bool alreadyRunning;$/;"	m	class:SocketHandler	access:private
appendText	./src/wxwindows.cpp	/^void JFrame::appendText(wxEvent &evt)$/;"	f	class:JFrame	signature:(wxEvent &evt)
appendText	./src/wxwindows.h	/^    void appendText(wxEvent &evt);$/;"	p	class:JFrame	access:public	signature:(wxEvent &evt)
attributeMap	./src/SaxParser.h	/^typedef map<string, string> attributeMap;$/;"	t
attributes	./src/Element.h	/^    map<string, string> attributes;$/;"	m	class:Element	access:private
autoReconnect	./src/Config.h	/^    bool	autoReconnect;$/;"	m	struct:__anon5	access:public
awaitingClient	./src/HTTPProcessor.cpp	/^void HTTPServer::awaitingClient(Socket* socket)$/;"	f	class:HTTPServer	signature:(Socket* socket)
awaitingClient	./src/HTTPProcessor.h	/^    void awaitingClient(Socket *);$/;"	p	class:HTTPServer	access:public	signature:(Socket *)
awaitingClient	./src/ServerSocket.h	/^    virtual void awaitingClient(Socket *) = 0;$/;"	p	class:ServerSocketListener	access:public	signature:(Socket *)
awaitingClient	./src/XmlSocketResponder.cpp	/^void XmlSocketProcessor::awaitingClient(Socket *client)$/;"	f	class:XmlSocketProcessor	signature:(Socket *client)
awaitingClient	./src/XmlSocketResponder.h	/^    void awaitingClient(Socket *);$/;"	p	class:XmlSocketProcessor	access:public	signature:(Socket *)
base64_chars	./src/websocket.cpp	/^const string WebSocketServer::base64_chars= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";;$/;"	m	class:WebSocketServer	file:
base64_chars	./src/websocket.h	/^    static const string base64_chars;$/;"	m	class:WebSocketServer	access:public
base64_encode	./src/websocket.cpp	/^string WebSocketServer::base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len)$/;"	f	class:WebSocketServer	signature:(unsigned char const* bytes_to_encode, unsigned int in_len)
base64_encode	./src/websocket.h	/^    static string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len);$/;"	p	class:WebSocketServer	access:public	signature:(unsigned char const* bytes_to_encode, unsigned int in_len)
bind	./src/Pointer.h	/^    void bind(T *t)$/;"	f	class:Pointer	access:protected	signature:(T *t)
bind	./src/Pointer.h	/^    void bind(const Pointer<T> &rhs)$/;"	f	class:Pointer	access:protected	signature:(const Pointer<T> &rhs)
bootstrap	./src/Kernel.cpp	/^string Kernel::bootstrap()$/;"	f	class:Kernel	signature:()
bootstrap	./src/Kernel.h	/^    static string bootstrap();$/;"	p	class:Kernel	access:public	signature:()
bootstrap	./src/Main.cpp	/^bool 	bootstrap			= true;$/;"	v
botClass	./src/JavaScriptProcessor.h	/^JSClass botClass =$/;"	v
botFunctions	./src/JavaScriptProcessor.h	/^static JSFunctionSpec botFunctions[] =$/;"	v
botGet	./src/JavaScriptProcessor.h	/^static JSBool botGet(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)$/;"	f	signature:(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)
botName	./src/Main.cpp	/^string	botName				= "Reeve";$/;"	v
botName	./src/XmlSocketResponder.h	/^    string botName;$/;"	m	class:XmlSocketResponder	access:private
botObject	./src/JavaScriptProcessor.h	/^    JSObject *botObject;$/;"	m	class:JavaScriptProcessor	access:private
botSet	./src/JavaScriptProcessor.h	/^static JSBool botSet(JSContext *cx, JSObject *, uintN argc, jsval *argv, jsval *rval)$/;"	f	signature:(JSContext *cx, JSObject *, uintN argc, jsval *argv, jsval *rval)
botStar	./src/JavaScriptProcessor.h	/^static JSBool botStar(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)$/;"	f	signature:(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)
botThatstar	./src/JavaScriptProcessor.h	/^static JSBool botThatstar(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)$/;"	f	signature:(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)
botTopicstar	./src/JavaScriptProcessor.h	/^static JSBool botTopicstar(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)$/;"	f	signature:(JSContext *cx, JSObject *, uintN, jsval *argv, jsval *rval)
buffer	./src/TokenProxyListener.h	/^    string separator, buffer;$/;"	m	class:TokenProxyListener	access:private
buffer	./src/XmlSocketResponder.h	/^    string buffer;$/;"	m	class:XmlSocketResponder	access:private
buffer_size	./src/Socket.cpp	/^const int buffer_size = 5000;$/;"	v
builtinObjects	./src/JavaScriptProcessor.h	/^    JSBool builtinObjects;$/;"	m	class:JavaScriptProcessor	access:private
bvector	./src/Socket.h	/^typedef vector<unsigned char> bvector;$/;"	t
calc	./src/sha1.cpp	/^void calc(const void* src, const int bytelength, unsigned char* hash)$/;"	f	namespace:sha1	signature:(const void* src, const int bytelength, unsigned char* hash)
calc	./src/sha1.h	/^void calc(const void* src, const int bytelength, unsigned char* hash);$/;"	p	namespace:sha1	signature:(const void* src, const int bytelength, unsigned char* hash)
channels	./src/Config.h	/^    vector<string>	channels;$/;"	m	struct:__anon5	access:public
checkCompatibility	./src/TemplateProcessor.cpp	/^PElement TemplateProcessor::checkCompatibility(PElement e)$/;"	f	class:TemplateProcessor	signature:(PElement e)
checkCompatibility	./src/TemplateProcessor.h	/^    static PElement checkCompatibility(PElement);$/;"	p	class:TemplateProcessor	access:private	signature:(PElement)
checkHandshake	./src/websocket.cpp	/^bool WebSocketServer::checkHandshake(int sd, string recieved)$/;"	f	class:WebSocketServer	signature:(int sd, string recieved)
checkHandshake	./src/websocket.h	/^    static bool checkHandshake(int sd, string recieved);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, string recieved)
child	./src/Element.h	/^    PElement child, next, last;$/;"	m	class:Element	access:private
children	./src/Nodemaster.h	/^    map<char *, Nodemaster *> children;$/;"	m	class:Nodemaster	access:private
children	./src/Substituter.h	/^    map<char, Node*> children;$/;"	m	class:Node	access:public
childrenMap	./src/Nodemaster.h	/^typedef map<char *, Nodemaster *> childrenMap;$/;"	t
clean	./src/Main.cpp	/^void clean(string &);$/;"	p	file:	signature:(string &)
clean	./src/Main.cpp	/^void clean(string &input)$/;"	f	signature:(string &input)
cleanup_reeve	./src/Main.cpp	/^void cleanup_reeve()$/;"	f	signature:()
cleanup_reeve	./src/Main.h	/^void cleanup_reeve();$/;"	p	signature:()
clearValue	./src/PredicateEngine.cpp	/^void PredicateEngine::clearValue(const string &property, const string &id, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, int index)
clearValue	./src/PredicateEngine.h	/^    void clearValue(const string &property, const string &id, int index = 1);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, int index = 1)
clearValues	./src/PredicateEngine.cpp	/^void PredicateEngine::clearValues(const string &property, const string &id)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id)
clearValues	./src/PredicateEngine.h	/^    void clearValues(const string &property, const string &id);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id)
clearWBuffert	./src/sha1.cpp	/^inline void clearWBuffert(unsigned int* buffert)$/;"	f	namespace:sha1::__anon3	signature:(unsigned int* buffert)
client	./src/HTTPProcessor.cpp	/^    Socket *client;$/;"	m	class:HTTPListener	file:	access:private
client	./src/XmlSocketResponder.h	/^    Socket *client;$/;"	m	class:XmlSocketResponder	access:private
closeFile	./src/LearnProcessor.h	/^    void closeFile()$/;"	f	class:LearnProcessor	access:private	signature:()
closeLog	./src/Logger.cpp	/^void Logger::closeLog(fstream &file)$/;"	f	class:Logger	signature:(fstream &file)
closeLog	./src/Logger.h	/^    static void closeLog(fstream &file);$/;"	p	class:Logger	access:private	signature:(fstream &file)
closesocket	./src/Compat.h	15;"	d
closesocket	./src/Compat.h	18;"	d
commands	./src/websocket.cpp	/^void WebSocketServer::commands(int sd, char message[1024])$/;"	f	class:WebSocketServer	signature:(int sd, char message[1024])
commands	./src/websocket.h	/^    void commands(int sd, char message[1024]);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, char message[1024])
connect	./src/Socket.cpp	/^void Socket::connect()$/;"	f	class:Socket	signature:()
connect	./src/Socket.h	/^    void connect();$/;"	p	class:Socket	access:public	signature:()
connectPattern	./src/Main.cpp	/^string	connectPattern		= "CONNECT";$/;"	v
connected	./src/HTTPProcessor.cpp	/^    void connected()$/;"	f	class:HTTPListener	access:public	signature:()
connected	./src/Socket.h	/^    virtual void connected() = 0;$/;"	p	class:SocketListener	access:public	signature:()
connected	./src/TokenProxyListener.h	/^    void connected()$/;"	f	class:TokenProxyListener	access:public	signature:()
connected	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::connected()$/;"	f	class:XmlSocketResponder	signature:()
connected	./src/XmlSocketResponder.h	/^    void connected();$/;"	p	class:XmlSocketResponder	access:public	signature:()
constants	./src/Kernel.cpp	/^const string Kernel::constants = " <pattern> <that> <topic> ";$/;"	m	class:Kernel	file:
constants	./src/Kernel.h	/^    static const string constants;$/;"	m	class:Kernel	access:private
context	./src/JavaScriptProcessor.h	/^    JSContext *context;$/;"	m	class:JavaScriptProcessor	access:private
context	./src/PreParser.h	/^    string context;$/;"	m	class:PreParser	access:private
contextPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
contextStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
controls	./src/wxwindows.h	/^    map<string, wxTextCtrl *> controls;$/;"	m	class:JFrame	access:private
convert	./src/Main.cpp	/^bool	convert				= false;$/;"	v
convertTempAiml	./src/Kernel.cpp	/^void Kernel::convertTempAiml()$/;"	f	class:Kernel	signature:()
convertTempAiml	./src/Kernel.h	/^    static void convertTempAiml();$/;"	p	class:Kernel	access:public	signature:()
count	./src/Pointer.h	/^        unsigned count;$/;"	m	class:Pointer::Holder	access:public
countTokens	./src/StringTokenizer.cpp	/^int StringTokenizer::countTokens()$/;"	f	class:StringTokenizer	signature:()
countTokens	./src/StringTokenizer.h	/^    int countTokens();$/;"	p	class:StringTokenizer	access:public	signature:()
cstr_hashset	./src/Utils.cpp	/^typedef hash_set<const char*, hash<const char*>, eqstr> cstr_hashset;$/;"	t	file:
current	./src/Parser.h	/^    PElement current, root;$/;"	m	class:Parser	access:private
currentPosition	./src/StringTokenizer.h	/^    int currentPosition;$/;"	m	class:StringTokenizer	access:private
currentTag	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
datum	./src/Pointer.h	/^        T *datum;$/;"	m	class:Pointer::Holder	access:public
debug	./src/Main.cpp	/^bool	debug				= false;$/;"	v
decode	./src/websocket.cpp	/^string WebSocketServer::decode(const char* buffer)$/;"	f	class:WebSocketServer	signature:(const char* buffer)
decode	./src/websocket.h	/^    static string decode(const char* buffer);$/;"	p	class:WebSocketServer	access:public	signature:(const char* buffer)
delim	./src/StringTokenizer.h	/^    string delim;$/;"	m	class:StringTokenizer	access:private
description	./src/Config.h	/^    string	description;$/;"	m	struct:__anon5	access:public
disconnect	./src/Socket.cpp	/^void Socket::disconnect(const char *reason)$/;"	f	class:Socket	signature:(const char *reason)
disconnect	./src/Socket.h	/^    void disconnect(const char *reason = NULL);$/;"	p	class:Socket	access:public	signature:(const char *reason = NULL)
disconnected	./src/HTTPProcessor.cpp	/^    void disconnected(const string &)$/;"	f	class:HTTPListener	access:public	signature:(const string &)
disconnected	./src/Socket.h	/^    virtual void disconnected(const string &) = 0;$/;"	p	class:SocketListener	access:public	signature:(const string &)
disconnected	./src/TokenProxyListener.h	/^    void disconnected(const string &msg)$/;"	f	class:TokenProxyListener	access:public	signature:(const string &msg)
disconnected	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::disconnected(const string &msg)$/;"	f	class:XmlSocketResponder	signature:(const string &msg)
disconnected	./src/XmlSocketResponder.h	/^    void disconnected(const string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(const string &)
dumpAiml	./src/NodeWalker.cpp	/^void NodeWalker::dumpAiml(Nodemaster *root)$/;"	f	class:NodeWalker	signature:(Nodemaster *root)
dumpAiml	./src/NodeWalker.cpp	/^void NodeWalker::dumpAiml(Nodemaster *root, const string &path, PElement doc)$/;"	f	class:NodeWalker	signature:(Nodemaster *root, const string &path, PElement doc)
dumpAiml	./src/NodeWalker.h	/^    static void dumpAiml(Nodemaster *);$/;"	p	class:NodeWalker	access:public	signature:(Nodemaster *)
dumpAiml	./src/NodeWalker.h	/^    static void dumpAiml(Nodemaster *, const string &, PElement);$/;"	p	class:NodeWalker	access:public	signature:(Nodemaster *, const string &, PElement)
element	./src/JavaScriptProcessor.h	/^    PElement element;$/;"	m	struct:__anon4	access:public
elementCData	./src/Parser.cpp	/^void Parser::elementCData(const string &cdata, int)$/;"	f	class:Parser	signature:(const string &cdata, int)
elementCData	./src/Parser.h	/^    void elementCData(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
elementCData	./src/PreParser.cpp	/^void PreParser::elementCData(const string &, int)$/;"	f	class:PreParser	signature:(const string &, int)
elementCData	./src/PreParser.h	/^    void elementCData(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
elementCData	./src/SaxParser.h	/^    virtual void elementCData(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
elementFinished	./src/Parser.cpp	/^void Parser::elementFinished(const string &, int)$/;"	f	class:Parser	signature:(const string &, int)
elementFinished	./src/Parser.h	/^    void elementFinished(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
elementFinished	./src/PreParser.cpp	/^void PreParser::elementFinished(const string &name, int index)$/;"	f	class:PreParser	signature:(const string &name, int index)
elementFinished	./src/PreParser.h	/^    void elementFinished(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
elementFinished	./src/SaxParser.h	/^    virtual void elementFinished(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
elementStarted	./src/Parser.cpp	/^void Parser::elementStarted(const string &name, attributeMap *am, int)$/;"	f	class:Parser	signature:(const string &name, attributeMap *am, int)
elementStarted	./src/Parser.cpp	/^void Parser::elementStarted(const string &name, int)$/;"	f	class:Parser	signature:(const string &name, int)
elementStarted	./src/Parser.h	/^    void elementStarted(const string &, attributeMap *, int);$/;"	p	class:Parser	access:private	signature:(const string &, attributeMap *, int)
elementStarted	./src/Parser.h	/^    void elementStarted(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
elementStarted	./src/PreParser.cpp	/^void PreParser::elementStarted(const string &name, attributeMap *attr, int index)$/;"	f	class:PreParser	signature:(const string &name, attributeMap *attr, int index)
elementStarted	./src/PreParser.cpp	/^void PreParser::elementStarted(const string &name, int index)$/;"	f	class:PreParser	signature:(const string &name, int index)
elementStarted	./src/PreParser.h	/^    void elementStarted(const string &, attributeMap *, int);$/;"	p	class:PreParser	access:public	signature:(const string &, attributeMap *, int)
elementStarted	./src/PreParser.h	/^    void elementStarted(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
elementStarted	./src/SaxParser.h	/^    virtual void elementStarted(const string &, attributeMap *, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, attributeMap *, int)
elementStarted	./src/SaxParser.h	/^    virtual void elementStarted(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
elementText	./src/Parser.cpp	/^void Parser::elementText(const string &text, int)$/;"	f	class:Parser	signature:(const string &text, int)
elementText	./src/Parser.h	/^    void elementText(const string &, int);$/;"	p	class:Parser	access:private	signature:(const string &, int)
elementText	./src/PreParser.cpp	/^void PreParser::elementText(const string &text, int)$/;"	f	class:PreParser	signature:(const string &text, int)
elementText	./src/PreParser.h	/^    void elementText(const string &, int);$/;"	p	class:PreParser	access:public	signature:(const string &, int)
elementText	./src/SaxParser.h	/^    virtual void elementText(const string &, int) = 0;$/;"	p	class:SaxListener	access:public	signature:(const string &, int)
elements	./src/PredicateEngine.h	/^    map<int, string> elements;$/;"	m	struct:__anon1	access:public
elements	./src/PredicateEngine.h	/^    map<int, string> elements;$/;"	m	struct:__anon2	access:public
enabled	./src/Config.h	/^    bool	enabled;$/;"	m	struct:__anon5	access:public
enabled	./src/Config.h	/^    bool	enabled;$/;"	m	struct:__anon6	access:public
enabled	./src/Config.h	/^    bool	enabled;$/;"	m	struct:__anon7	access:public
encode	./src/websocket.cpp	/^string WebSocketServer::encode(const char* message)$/;"	f	class:WebSocketServer	signature:(const char* message)
encode	./src/websocket.h	/^    static string encode(const char* message);$/;"	p	class:WebSocketServer	access:public	signature:(const char* message)
end	./src/Template.h	/^    streamsize start, end;$/;"	m	class:Template	access:private
eqstr	./src/Utils.cpp	/^struct eqstr$/;"	s	file:
eqstr::operator ()	./src/Utils.cpp	/^    bool operator()(const char* s1, const char* s2) const$/;"	f	struct:eqstr	access:public	signature:(const char* s1, const char* s2) const
event	./src/TimeKeeper.h	/^    Event *event;$/;"	m	class:TimedEvent	access:private
fetch	./src/Template.cpp	/^string Template::fetch()$/;"	f	class:Template	signature:()
fetch	./src/Template.h	/^    string fetch();$/;"	p	class:Template	access:public	signature:()
filename	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
filenameIx	./src/Template.h	/^    int filenameIx;$/;"	m	class:Template	access:public
filenames	./src/Template.cpp	/^vector<string> Template::filenames;$/;"	m	class:Template	file:
filenames	./src/Template.h	/^    static vector<string> filenames;$/;"	m	class:Template	access:private
filesizes	./src/Template.cpp	/^vector<long> Template::filesizes;$/;"	m	class:Template	file:
filesizes	./src/Template.h	/^    static vector<long> filesizes;$/;"	m	class:Template	access:private
forward	./src/TokenProxyListener.h	/^    SocketListener *forward;$/;"	m	class:TokenProxyListener	access:private
gArrayMap	./src/PredicateEngine.h	/^typedef map<string, ARRAY> gArrayMap;$/;"	t
getActualTemplate	./src/Nodemaster.cpp	/^Template *Nodemaster::getActualTemplate()$/;"	f	class:Nodemaster	signature:()
getActualTemplate	./src/Nodemaster.h	/^    Template *getActualTemplate();$/;"	p	class:Nodemaster	access:public	signature:()
getAttribute	./src/Element.cpp	/^string Element::getAttribute(const string &key) const$/;"	f	class:Element	signature:(const string &key) const
getAttribute	./src/Element.h	/^    string getAttribute(const string &) const;$/;"	p	class:Element	access:public	signature:(const string &) const
getAttributes	./src/Element.cpp	/^map<string, string> Element::getAttributes() const$/;"	f	class:Element	signature:() const
getAttributes	./src/Element.h	/^    map<string, string> getAttributes() const;$/;"	p	class:Element	access:public	signature:() const
getAuthor	./src/Nodemapper.h	/^    virtual string getAuthor() = 0;$/;"	p	class:Nodemapper	access:public	signature:()
getChild	./src/Element.cpp	/^PElement Element::getChild() const$/;"	f	class:Element	signature:() const
getChild	./src/Element.cpp	/^PElement Element::getChild(const string &tagname) const$/;"	f	class:Element	signature:(const string &tagname) const
getChild	./src/Element.h	/^    PElement getChild() const;$/;"	p	class:Element	access:public	signature:() const
getChild	./src/Element.h	/^    PElement getChild(const string &) const;$/;"	p	class:Element	access:public	signature:(const string &) const
getChild	./src/Nodemapper.h	/^    virtual Nodemapper *getChild(const string &) = 0;$/;"	p	class:Nodemapper	access:public	signature:(const string &)
getChild	./src/Nodemaster.cpp	/^Nodemaster *Nodemaster::getChild(const string &key)$/;"	f	class:Nodemaster	signature:(const string &key)
getChild	./src/Nodemaster.h	/^    Nodemaster *getChild(const string &);$/;"	p	class:Nodemaster	access:public	signature:(const string &)
getChild	./src/Substituter.h	/^    Node *getChild(char ch)$/;"	f	class:Node	access:public	signature:(char ch)
getChildren	./src/Element.cpp	/^void Element::getChildren(const string &tagname, velement *ve)$/;"	f	class:Element	signature:(const string &tagname, velement *ve)
getChildren	./src/Element.cpp	/^void Element::getChildren(velement *ve)$/;"	f	class:Element	signature:(velement *ve)
getChildren	./src/Element.h	/^    void getChildren(const string &, velement *);$/;"	p	class:Element	access:public	signature:(const string &, velement *)
getChildren	./src/Element.h	/^    void getChildren(velement *);$/;"	p	class:Element	access:public	signature:(velement *)
getChildren	./src/NodeWalker.cpp	/^walkingVec getChildren(childrenMap &);$/;"	p	file:	signature:(childrenMap &)
getChildren	./src/NodeWalker.cpp	/^walkingVec getChildren(childrenMap &children)$/;"	f	signature:(childrenMap &children)
getContextPattern	./src/Match.cpp	/^string Match::getContextPattern() const$/;"	f	class:Match	signature:() const
getContextPattern	./src/Match.h	/^    string getContextPattern() const;$/;"	p	class:Match	access:public	signature:() const
getContextStar	./src/Match.cpp	/^string Match::getContextStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
getContextStar	./src/Match.h	/^    string getContextStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
getContextStarCount	./src/Match.cpp	/^unsigned int Match::getContextStarCount() const$/;"	f	class:Match	signature:() const
getContextStarCount	./src/Match.h	/^    unsigned int getContextStarCount() const;$/;"	p	class:Match	access:public	signature:() const
getFilename	./src/Nodemapper.h	/^    virtual string getFilename() = 0;$/;"	p	class:Nodemapper	access:public	signature:()
getFilename	./src/Template.cpp	/^const char *Template::getFilename(int index)$/;"	f	class:Template	signature:(int index)
getFilename	./src/Template.cpp	/^string Template::getFilename()$/;"	f	class:Template	signature:()
getFilename	./src/Template.h	/^    static const char *getFilename(int index);$/;"	p	class:Template	access:private	signature:(int index)
getFilename	./src/Template.h	/^    string getFilename();$/;"	p	class:Template	access:public	signature:()
getHistory	./src/PredicateEngine.cpp	/^string PredicateEngine::getHistory(const string &property, const string &id, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, int index)
getHistory	./src/PredicateEngine.h	/^    string getHistory(const string &property, const string &id, int index = 0);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, int index = 0)
getInputPattern	./src/Match.cpp	/^string Match::getInputPattern() const$/;"	f	class:Match	signature:() const
getInputPattern	./src/Match.h	/^    string getInputPattern() const;$/;"	p	class:Match	access:public	signature:() const
getInputStar	./src/Match.cpp	/^string Match::getInputStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
getInputStar	./src/Match.h	/^    string getInputStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
getInputStarCount	./src/Match.cpp	/^unsigned int Match::getInputStarCount() const$/;"	f	class:Match	signature:() const
getInputStarCount	./src/Match.h	/^    unsigned int getInputStarCount() const;$/;"	p	class:Match	access:public	signature:() const
getKey	./src/websocket.cpp	/^string WebSocketServer::getKey(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
getKey	./src/websocket.h	/^    static string getKey(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
getListener	./src/SaxParser.h	/^    SaxListener *getListener()$/;"	f	class:SaxParser	access:public	signature:()
getListener	./src/Socket.cpp	/^SocketListener *Socket::getListener()$/;"	f	class:Socket	signature:()
getListener	./src/Socket.h	/^    SocketListener *getListener();$/;"	p	class:Socket	access:public	signature:()
getName	./src/PersonProcessor.h	/^    string getName() const$/;"	f	class:GenderProcessor	access:public	signature:() const
getName	./src/PersonProcessor.h	/^    string getName() const$/;"	f	class:Person2Processor	access:public	signature:() const
getName	./src/XmlSocketResponder.h	/^    string getName() const$/;"	f	class:XmlSocketProcessor	access:public	signature:() const
getNamespace	./src/Element.cpp	/^string Element::getNamespace() const$/;"	f	class:Element	signature:() const
getNamespace	./src/Element.h	/^    string getNamespace() const;$/;"	p	class:Element	access:public	signature:() const
getNextSibling	./src/Element.cpp	/^PElement Element::getNextSibling() const$/;"	f	class:Element	signature:() const
getNextSibling	./src/Element.h	/^    PElement getNextSibling() const;$/;"	p	class:Element	access:public	signature:() const
getNode	./src/Match.cpp	/^Nodemaster *Match::getNode() const$/;"	f	class:Match	signature:() const
getNode	./src/Match.h	/^    Nodemaster *getNode() const;$/;"	p	class:Match	access:public	signature:() const
getPath	./src/Match.cpp	/^string Match::getPath() const$/;"	f	class:Match	signature:() const
getPath	./src/Match.h	/^    string getPath() const;$/;"	p	class:Match	access:public	signature:() const
getPeerName	./src/Socket.h	/^    const char* getPeerName()$/;"	f	class:Socket	access:public	signature:()
getProcessor	./src/TemplateProcessor.cpp	/^AimlProcessor *TemplateProcessor::getProcessor(const string &name)$/;"	f	class:TemplateProcessor	signature:(const string &name)
getProcessor	./src/TemplateProcessor.h	/^    static AimlProcessor *getProcessor(const string &name);$/;"	p	class:TemplateProcessor	access:public	signature:(const string &name)
getRoot	./src/Parser.cpp	/^PElement Parser::getRoot() const$/;"	f	class:Parser	signature:() const
getRoot	./src/Parser.h	/^    PElement getRoot() const;$/;"	p	class:Parser	access:public	signature:() const
getSD	./src/Socket.cpp	/^int Socket::getSD()$/;"	f	class:Socket	signature:()
getSD	./src/Socket.h	/^    int getSD();$/;"	p	class:Socket	access:public	signature:()
getSentence	./src/Kernel.cpp	/^string getSentence(string &input)$/;"	f	signature:(string &input)
getSentence	./src/Kernel.cpp	/^string getSentence(string &input);$/;"	p	file:	signature:(string &input)
getServerListener	./src/ServerSocket.cpp	/^ServerSocketListener *ServerSocket::getServerListener()$/;"	f	class:ServerSocket	signature:()
getServerListener	./src/ServerSocket.h	/^    ServerSocketListener *getServerListener();$/;"	p	class:ServerSocket	access:public	signature:()
getSocket	./src/HTTPProcessor.cpp	/^    Socket *getSocket()$/;"	f	class:HTTPListener	access:public	signature:()
getStream	./src/Stream.cpp	/^Stream *StreamProvider::getStream(const char *strName)$/;"	f	class:StreamProvider	signature:(const char *strName)
getStream	./src/Stream.cpp	/^Stream* getStream(const char *szName)$/;"	f	signature:(const char *szName)
getStream	./src/Stream.h	/^    virtual Stream *getStream(const char *str);$/;"	p	class:StreamProvider	access:public	signature:(const char *str)
getStream	./src/Stream.h	/^Stream* getStream(const char *szName);$/;"	p	signature:(const char *szName)
getStream	./src/wxwindows.cpp	/^Stream *JThread::getStream(const char *cs)$/;"	f	class:JThread	signature:(const char *cs)
getStream	./src/wxwindows.h	/^    Stream *getStream(const char *cs);$/;"	p	class:JThread	access:public	signature:(const char *cs)
getSubstituter	./src/Substituter.cpp	/^SubTree Substituter::getSubstituter(const string &name)$/;"	f	class:Substituter	signature:(const string &name)
getSubstituter	./src/Substituter.h	/^    static SubTree getSubstituter(const string &);$/;"	p	class:Substituter	access:public	signature:(const string &)
getTagname	./src/Element.cpp	/^string Element::getTagname() const$/;"	f	class:Element	signature:() const
getTagname	./src/Element.h	/^    string getTagname() const;$/;"	p	class:Element	access:public	signature:() const
getTemplate	./src/Match.cpp	/^string Match::getTemplate() const$/;"	f	class:Match	signature:() const
getTemplate	./src/Match.h	/^    string getTemplate() const;$/;"	p	class:Match	access:public	signature:() const
getTemplate	./src/Nodemapper.h	/^    virtual string getTemplate() = 0;$/;"	p	class:Nodemapper	access:public	signature:()
getTemplate	./src/Nodemaster.cpp	/^string Nodemaster::getTemplate(bool reload)$/;"	f	class:Nodemaster	signature:(bool reload)
getTemplate	./src/Nodemaster.h	/^    string getTemplate(bool reload = true);$/;"	p	class:Nodemaster	access:public	signature:(bool reload = true)
getText	./src/Element.cpp	/^string Element::getText(bool resolve) const$/;"	f	class:Element	signature:(bool resolve) const
getText	./src/Element.h	/^    string getText(bool resolve = true) const;$/;"	p	class:Element	access:public	signature:(bool resolve = true) const
getThatPattern	./src/Match.cpp	/^string Match::getThatPattern() const$/;"	f	class:Match	signature:() const
getThatPattern	./src/Match.h	/^    string getThatPattern() const;$/;"	p	class:Match	access:public	signature:() const
getThatStar	./src/Match.cpp	/^string Match::getThatStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
getThatStar	./src/Match.h	/^    string getThatStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
getThatStarCount	./src/Match.cpp	/^unsigned int Match::getThatStarCount() const$/;"	f	class:Match	signature:() const
getThatStarCount	./src/Match.h	/^    unsigned int getThatStarCount() const;$/;"	p	class:Match	access:public	signature:() const
getTime	./src/TimeKeeper.h	/^    long getTime() const$/;"	f	class:TimedEvent	access:public	signature:() const
getTopicPattern	./src/Match.cpp	/^string Match::getTopicPattern() const$/;"	f	class:Match	signature:() const
getTopicPattern	./src/Match.h	/^    string getTopicPattern() const;$/;"	p	class:Match	access:public	signature:() const
getTopicStar	./src/Match.cpp	/^string Match::getTopicStar(unsigned int i) const$/;"	f	class:Match	signature:(unsigned int i) const
getTopicStar	./src/Match.h	/^    string getTopicStar(unsigned int i) const;$/;"	p	class:Match	access:public	signature:(unsigned int i) const
getTopicStarCount	./src/Match.cpp	/^unsigned int Match::getTopicStarCount() const$/;"	f	class:Match	signature:() const
getTopicStarCount	./src/Match.h	/^    unsigned int getTopicStarCount() const;$/;"	p	class:Match	access:public	signature:() const
getValue	./src/PredicateEngine.cpp	/^string PredicateEngine::getValue(const string &property, const string &id, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, int index)
getValue	./src/PredicateEngine.h	/^    string getValue(const string &property, const string &id, int index = 1);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, int index = 1)
getValues	./src/PredicateEngine.cpp	/^string PredicateEngine::getValues(const string &property, const string &id, const string &conjunction)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &conjunction)
getValues	./src/PredicateEngine.h	/^    string getValues(const string &property, const string &id, const string &conjunction = " and ");$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &conjunction = Ó)
getVersion	./src/PersonProcessor.h	/^    string getVersion() const$/;"	f	class:GenderProcessor	access:public	signature:() const
getVersion	./src/PersonProcessor.h	/^    string getVersion() const$/;"	f	class:Person2Processor	access:public	signature:() const
getVersion	./src/XmlSocketResponder.h	/^    string getVersion() const$/;"	f	class:XmlSocketProcessor	access:public	signature:() const
get_string	./src/Utils.cpp	/^char *get_string(const string &str)$/;"	f	signature:(const string &str)
get_string	./src/Utils.h	/^char *get_string(const string &str);$/;"	p	signature:(const string &str)
globalClass	./src/JavaScriptProcessor.h	/^JSClass globalClass =$/;"	v
globalObject	./src/JavaScriptProcessor.h	/^    JSObject *globalObject;$/;"	m	class:JavaScriptProcessor	access:private
hasAttributes	./src/Element.cpp	/^bool Element::hasAttributes() const$/;"	f	class:Element	signature:() const
hasAttributes	./src/Element.h	/^    bool hasAttributes() const;$/;"	p	class:Element	access:public	signature:() const
hasChildren	./src/Element.cpp	/^bool Element::hasChildren() const$/;"	f	class:Element	signature:() const
hasChildren	./src/Element.h	/^    bool hasChildren() const;$/;"	p	class:Element	access:public	signature:() const
hasMoreTokens	./src/StringTokenizer.cpp	/^bool StringTokenizer::hasMoreTokens()$/;"	f	class:StringTokenizer	signature:()
hasMoreTokens	./src/StringTokenizer.h	/^    bool hasMoreTokens();$/;"	p	class:StringTokenizer	access:public	signature:()
hasNamespace	./src/Element.cpp	/^bool Element::hasNamespace() const$/;"	f	class:Element	signature:() const
hasNamespace	./src/Element.h	/^    bool hasNamespace() const;$/;"	p	class:Element	access:public	signature:() const
hasProcessor	./src/Handler.cpp	/^bool Handler::hasProcessor(const string &name)$/;"	f	class:Handler	signature:(const string &name)
hasProcessor	./src/Handler.h	/^    static bool hasProcessor(const string &name);$/;"	p	class:Handler	access:public	signature:(const string &name)
hasTemplate	./src/Nodemaster.cpp	/^bool Nodemaster::hasTemplate()$/;"	f	class:Nodemaster	signature:()
hasTemplate	./src/Nodemaster.h	/^    bool hasTemplate();$/;"	p	class:Nodemaster	access:public	signature:()
hexToInt	./src/Utils.cpp	/^int hexToInt(char ch)$/;"	f	signature:(char ch)
hexToInt	./src/Utils.cpp	/^int hexToInt(char);$/;"	p	file:	signature:(char)
history	./src/PredicateEngine.h	/^    historyMap history;$/;"	m	class:PredicateEngine	access:private
historyMap	./src/PredicateEngine.h	/^typedef map<pair<string, string>, HISTORY> historyMap;$/;"	t
hook	./src/TemplateProcessor.h	/^    static AimlProcessor *hook;$/;"	m	class:TemplateProcessor	access:private
host	./src/Config.h	/^    string	host;$/;"	m	struct:__anon5	access:public
host	./src/Socket.h	/^    const char *host;$/;"	m	class:Socket	access:protected
httpConfig	./src/Main.cpp	/^HttpConfig			httpConfig;$/;"	v
ic	./src/Kernel.cpp	/^IrcConfig ic;$/;"	v
id	./src/JavaScriptProcessor.h	/^    string id;$/;"	m	struct:__anon4	access:public
init	./src/Handler.cpp	/^void Handler::init()$/;"	f	class:Handler	signature:()
init	./src/Handler.h	/^    static void init();$/;"	p	class:Handler	access:public	signature:()
init	./src/LearnProcessor.h	/^    bool init;$/;"	m	class:LearnProcessor	access:private
init	./src/ServerSocket.cpp	/^bool ServerSocket::init()$/;"	f	class:ServerSocket	signature:()
init	./src/ServerSocket.h	/^    bool init();$/;"	p	class:ServerSocket	access:public	signature:()
init	./src/wxwindows.h	/^    bool init;$/;"	m	class:JFrame	access:private
init_reeve	./src/Main.cpp	/^int init_reeve(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
init_reeve	./src/Main.h	/^int init_reeve(int argc=0, char **argv=NULL);$/;"	p	signature:(int argc=0, char **argv=NULL)
initialised	./src/JavaScriptProcessor.h	/^    bool initialised;$/;"	m	class:JavaScriptProcessor	access:private
innerHash	./src/sha1.cpp	/^void innerHash(unsigned int* result, unsigned int* w)$/;"	f	namespace:sha1::__anon3	signature:(unsigned int* result, unsigned int* w)
inputPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
inputStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
intToHex	./src/Utils.cpp	/^string intToHex(int i)$/;"	f	signature:(int i)
intToHex	./src/Utils.cpp	/^string intToHex(int);$/;"	p	file:	signature:(int)
isWS	./src/websocket.cpp	/^bool WebSocketServer::isWS(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
isWS	./src/websocket.h	/^    static bool isWS(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
jThread	./src/wxwindows.cpp	/^    JThread *jThread;$/;"	m	class:Main	file:	access:private
kernel	./src/Main.cpp	/^Kernel 	*kernel				= NULL;$/;"	v
last	./src/Element.h	/^    PElement child, next, last;$/;"	m	class:Element	access:private
learnFile	./src/LearnProcessor.h	/^    fstream learnFile;$/;"	m	class:LearnProcessor	access:private
lessKey	./src/NodeWalker.cpp	/^struct lessKey : public binary_function<vecPair, vecPair, bool>$/;"	s	file:	inherits:binary_function
lessKey::operator ()	./src/NodeWalker.cpp	/^    bool operator() (vecPair lhs, vecPair rhs)$/;"	f	struct:lessKey	access:public	signature:(vecPair lhs, vecPair rhs)
listener	./src/SaxParser.h	/^    SaxListener *listener;$/;"	m	class:SaxParser	access:private
listener	./src/Socket.h	/^    SocketListener *listener;$/;"	m	class:Socket	access:protected
load	./src/Kernel.cpp	/^bool Kernel::load(const string &file)$/;"	f	class:Kernel	signature:(const string &file)
load	./src/Kernel.h	/^    static bool load(const string &file);$/;"	p	class:Kernel	access:public	signature:(const string &file)
load10	./src/Kernel.h	/^    static void load10(const string &file, PElement &root);$/;"	p	class:Kernel	access:public	signature:(const string &file, PElement &root)
loadConfig	./src/Main.cpp	/^void loadConfig()$/;"	f	signature:()
loadConfig	./src/Main.cpp	/^void loadConfig();$/;"	p	file:	signature:()
loadSubstitutions	./src/Kernel.cpp	/^void Kernel::loadSubstitutions()$/;"	f	class:Kernel	signature:()
loadSubstitutions	./src/Kernel.h	/^    static void loadSubstitutions();$/;"	p	class:Kernel	access:public	signature:()
loadTemporaryData	./src/Kernel.cpp	/^void Kernel::loadTemporaryData()$/;"	f	class:Kernel	signature:()
loadTemporaryData	./src/Kernel.h	/^    static void loadTemporaryData();$/;"	p	class:Kernel	access:private	signature:()
loadedOk	./src/wxwindows.h	/^    bool loadedOk()$/;"	f	class:JFrame	access:public	signature:()
log	./src/Logger.cpp	/^void Logger::log(const string &msg, const string &file, bool header)$/;"	f	class:Logger	signature:(const string &msg, const string &file, bool header)
log	./src/Logger.cpp	/^void Logger::log(const string &msg, int logType)$/;"	f	class:Logger	signature:(const string &msg, int logType)
log	./src/Logger.h	/^    static void log(const string &msg, const string &file, bool header = true);$/;"	p	class:Logger	access:public	signature:(const string &msg, const string &file, bool header = true)
log	./src/Logger.h	/^    static void log(const string &msg, int logType);$/;"	p	class:Logger	access:public	signature:(const string &msg, int logType)
lookup	./src/Kernel.cpp	/^bool Kernel::lookup(const string &, const string &)$/;"	f	class:Kernel	signature:(const string &, const string &)
lookup	./src/Kernel.h	/^    static bool lookup(const string &, const string &);$/;"	p	class:Kernel	access:private	signature:(const string &, const string &)
loopPattern	./src/Main.cpp	/^string	loopPattern			= "LOSTINLOOP";$/;"	v
main	./src/Main.cpp	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
mainFrame	./src/wxwindows.cpp	/^static JFrame *mainFrame = NULL;$/;"	v	file:
master_socket	./src/websocket.cpp	/^int WebSocketServer::master_socket;$/;"	m	class:WebSocketServer	file:
master_socket	./src/websocket.h	/^    static int master_socket;$/;"	m	class:WebSocketServer	access:private
match	./src/JavaScriptProcessor.h	/^    Match *match;$/;"	m	struct:__anon4	access:public
match	./src/Kernel.cpp	/^Match *Kernel::match(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path)$/;"	f	class:Kernel	signature:(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path)
match	./src/Kernel.cpp	/^Match *Kernel::match(const string &context, const string &input, const string &that, const string &topic)$/;"	f	class:Kernel	signature:(const string &context, const string &input, const string &that, const string &topic)
match	./src/Kernel.h	/^    static Match *match(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path);$/;"	p	class:Kernel	access:public	signature:(Nodemaster *node, Nodemaster *parent, int state, const string &input, const string &star, const string &path)
match	./src/Kernel.h	/^    static Match *match(const string &context, const string &input, const string &that, const string &topic);$/;"	p	class:Kernel	access:public	signature:(const string &context, const string &input, const string &that, const string &topic)
maxPosition	./src/StringTokenizer.h	/^    int maxPosition;$/;"	m	class:StringTokenizer	access:private
maxRecursiveDepth	./src/Main.cpp	/^int		maxRecursiveDepth	= 32;$/;"	v
maxRetries	./src/Config.h	/^    int		maxRetries;$/;"	m	struct:__anon5	access:public
my_ErrorReporter	./src/JavaScriptProcessor.h	/^my_ErrorReporter(JSContext *, const char *message, JSErrorReport *report)$/;"	f	signature:(JSContext *, const char *message, JSErrorReport *report)
mystrdup	./src/Utils.cpp	/^char *mystrdup(const char *str)$/;"	f	signature:(const char *str)
mystrdup	./src/Utils.h	/^char *mystrdup(const char *str);$/;"	p	signature:(const char *str)
name	./src/wxwindows.h	/^    string name, text;$/;"	m	class:UpdateTabEvent	access:public
name	./src/wxwindows.h	/^    string name;$/;"	m	class:GuiStream	access:private
name	./src/wxwindows.h	/^    string name;$/;"	m	class:NewTabEvent	access:public
next	./src/Element.h	/^    PElement child, next, last;$/;"	m	class:Element	access:private
nextToken	./src/StringTokenizer.cpp	/^string StringTokenizer::nextToken()$/;"	f	class:StringTokenizer	signature:()
nextToken	./src/StringTokenizer.cpp	/^string StringTokenizer::nextToken(const string &d)$/;"	f	class:StringTokenizer	signature:(const string &d)
nextToken	./src/StringTokenizer.h	/^    string nextToken();$/;"	p	class:StringTokenizer	access:public	signature:()
nextToken	./src/StringTokenizer.h	/^    string nextToken(const string &d);$/;"	p	class:StringTokenizer	access:public	signature:(const string &d)
nicks	./src/Config.h	/^    vector<string>	nicks;$/;"	m	struct:__anon5	access:public
noMatchPattern	./src/Main.cpp	/^string	noMatchPattern		= "NOMATCH";$/;"	v
node	./src/Match.h	/^    Nodemaster *node;$/;"	m	class:Match	access:private
nspace	./src/Element.h	/^    char *tname, *nspace;$/;"	m	class:Element	access:private
numClients	./src/HTTPProcessor.cpp	/^    static int numClients;$/;"	m	class:HTTPListener	file:	access:private
numClients	./src/HTTPProcessor.cpp	/^int HTTPListener::numClients = 0;$/;"	m	class:HTTPListener	file:
number	./src/PredicateEngine.h	/^    int number;$/;"	m	struct:__anon2	access:public
onClose	./src/wxwindows.cpp	/^void JFrame::onClose(wxCloseEvent &)$/;"	f	class:JFrame	signature:(wxCloseEvent &)
onClose	./src/wxwindows.h	/^    void onClose(wxCloseEvent &);$/;"	p	class:JFrame	access:public	signature:(wxCloseEvent &)
openFile	./src/LearnProcessor.h	/^    void openFile()$/;"	f	class:LearnProcessor	access:private	signature:()
openLog	./src/Logger.cpp	/^bool Logger::openLog(fstream &file, const string &name)$/;"	f	class:Logger	signature:(fstream &file, const string &name)
openLog	./src/Logger.h	/^    static bool openLog(fstream &file, const string &name);$/;"	p	class:Logger	access:private	signature:(fstream &file, const string &name)
operator !=	./src/Pointer.h	/^    bool operator!=(T *t) const$/;"	f	class:Pointer	access:public	signature:(T *t) const
operator !=	./src/Pointer.h	/^    bool operator!=(const Pointer<T> &rhs) const$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs) const
operator ()	./src/NodeWalker.cpp	/^    bool operator() (vecPair lhs, vecPair rhs)$/;"	f	struct:lessKey	access:public	signature:(vecPair lhs, vecPair rhs)
operator ()	./src/TimeKeeper.h	/^    bool operator() (const TimedEvent *lhs, const TimedEvent *rhs)$/;"	f	struct:tComp	access:public	signature:(const TimedEvent *lhs, const TimedEvent *rhs)
operator ()	./src/Utils.cpp	/^    bool operator()(const char* s1, const char* s2) const$/;"	f	struct:eqstr	access:public	signature:(const char* s1, const char* s2) const
operator *	./src/Pointer.h	/^    T &operator*()$/;"	f	class:Pointer	access:public	signature:()
operator *	./src/Pointer.h	/^    const T &operator*() const$/;"	f	class:Pointer	access:public	signature:() const
operator ->	./src/Pointer.h	/^    T *operator->()$/;"	f	class:Pointer	access:public	signature:()
operator ->	./src/Pointer.h	/^    const T *operator->() const$/;"	f	class:Pointer	access:public	signature:() const
operator =	./src/Pointer.h	/^    Pointer<T> &operator=(T *t)$/;"	f	class:Pointer	access:public	signature:(T *t)
operator =	./src/Pointer.h	/^    Pointer<T> &operator=(const Pointer<T> &rhs)$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs)
operator ==	./src/Pointer.h	/^    bool operator==(T *t) const$/;"	f	class:Pointer	access:public	signature:(T *t) const
operator ==	./src/Pointer.h	/^    bool operator==(const Pointer<T> &rhs) const$/;"	f	class:Pointer	access:public	signature:(const Pointer<T> &rhs) const
parse	./src/AimlWriter.cpp	/^string AimlWriter::parse(PElement tree, bool pretty, const string &rootName, bool addRoot)$/;"	f	class:AimlWriter	signature:(PElement tree, bool pretty, const string &rootName, bool addRoot)
parse	./src/AimlWriter.h	/^    static string parse(PElement, bool pretty, const string &rootName = "", bool addRoot = false);$/;"	p	class:AimlWriter	access:public	signature:(PElement, bool pretty, const string &rootName = Ó, bool addRoot = false)
parse	./src/SaxParser.cpp	/^void SaxParser::parse(istream &in)$/;"	f	class:SaxParser	signature:(istream &in)
parse	./src/SaxParser.h	/^    void parse(istream &);$/;"	p	class:SaxParser	access:public	signature:(istream &)
password	./src/Config.h	/^    string	password;$/;"	m	struct:__anon8	access:public
path	./src/Match.h	/^    string path;$/;"	m	class:Match	access:private
pattern	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
patternPrefix	./src/Config.h	/^    string	patternPrefix;$/;"	m	struct:__anon5	access:public
patternPrefix	./src/Config.h	/^    string	patternPrefix;$/;"	m	struct:__anon6	access:public
patternPrefix	./src/Config.h	/^    string	patternPrefix;$/;"	m	struct:__anon7	access:public
port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon5	access:public
port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon6	access:public
port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon7	access:public
port	./src/Config.h	/^    short	port;$/;"	m	struct:__anon8	access:public
port	./src/Socket.h	/^    int sd, port;$/;"	m	class:Socket	access:protected
port	./src/XmlSocketResponder.h	/^    int port;$/;"	m	class:XmlSocketProcessor	access:private
predicates	./src/Kernel.cpp	/^PredicateEngine *Kernel::predicates = new PredicateEngine();$/;"	m	class:Kernel	file:
predicates	./src/Kernel.h	/^    static PredicateEngine *predicates;$/;"	m	class:Kernel	access:public
prettyAiml	./src/AimlWriter.cpp	/^string AimlWriter::prettyAiml(PElement element)$/;"	f	class:AimlWriter	signature:(PElement element)
prettyAiml	./src/AimlWriter.h	/^    static string prettyAiml(PElement);$/;"	p	class:AimlWriter	access:public	signature:(PElement)
prettyPrintHeader	./src/Kernel.cpp	/^void prettyPrintHeader(const string &, int, int, long);$/;"	p	file:	signature:(const string &, int, int, long)
prettyPrintHeader	./src/Kernel.cpp	/^void prettyPrintHeader(const string &filename, int size, int totalSize, long time)$/;"	f	signature:(const string &filename, int size, int totalSize, long time)
process	./src/AimlProcessor.h	/^    virtual string process(Match *, PElement, Responder *, const string &) = 0;$/;"	p	class:AimlProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
process	./src/BotProcessor.h	/^    string process(Match *, PElement e, Responder *, const string &id)$/;"	f	class:BotProcessor	access:public	signature:(Match *, PElement e, Responder *, const string &id)
process	./src/BrProcessor.h	/^    string process(Match *, PElement, Responder *, const string &)$/;"	f	class:BrProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
process	./src/ConditionProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ConditionProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/FormalProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:FormalProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/GetProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:GetProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/HTTPProcessor.cpp	/^string HTTPProcessor::process(Match *, PElement, Responder *, const string &)$/;"	f	class:HTTPProcessor	signature:(Match *, PElement, Responder *, const string &)
process	./src/HTTPProcessor.h	/^    string process(Match *, PElement, Responder *, const string &);$/;"	p	class:HTTPProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
process	./src/IdProcessor.h	/^    string process(Match *, PElement, Responder *, const string &id)$/;"	f	class:IdProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
process	./src/ImpExpProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ExplodeProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/ImpExpProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ImplodeProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/InputProcessor.h	/^    string process(Match *, PElement e, Responder *, const string &id)$/;"	f	class:InputProcessor	access:public	signature:(Match *, PElement e, Responder *, const string &id)
process	./src/JavaScriptProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:JavaScriptProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/Kernel.cpp	/^string Kernel::process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:Kernel	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/Kernel.h	/^    static string process(Match *m, PElement e, Responder *, const string &id);$/;"	p	class:Kernel	access:public	signature:(Match *m, PElement e, Responder *, const string &id)
process	./src/LearnProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:LearnProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/LowercaseProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:LowercaseProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/Main.cpp	/^void process(string &, int, string &, string &);$/;"	p	file:	signature:(string &, int, string &, string &)
process	./src/Main.cpp	/^void process(string &s, int ss, string &p, string &v)$/;"	f	signature:(string &s, int ss, string &p, string &v)
process	./src/NameProcessor.h	/^    string process(Match *, PElement, Responder *, const string &id)$/;"	f	class:NameProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
process	./src/NormalizeProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:NormalizeProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/PersonProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:GenderProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/PersonProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:Person2Processor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/PersonProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:PersonProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/RandomProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:RandomProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/SecureProcessor.h	/^    string process(Match *, PElement, Responder *, const string &id)$/;"	f	class:AuthenticateProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
process	./src/SecureProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SecureProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/SentenceProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SentenceProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/ServerSocket.cpp	/^void ServerSocket::process()$/;"	f	class:ServerSocket	signature:()
process	./src/ServerSocket.h	/^    virtual void process();$/;"	p	class:ServerSocket	access:public	signature:()
process	./src/SetProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SetProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/Socket.cpp	/^void Socket::process()$/;"	f	class:Socket	signature:()
process	./src/Socket.h	/^    virtual void process();$/;"	p	class:Socket	access:public	signature:()
process	./src/SrProcessor.h	/^    string process(Match *m, PElement, Responder *, const string &id)$/;"	f	class:SrProcessor	access:public	signature:(Match *m, PElement, Responder *, const string &id)
process	./src/SraiProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SraiProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/StarProcessor.h	/^    string process(Match *m, PElement e, Responder *, const string &)$/;"	f	class:StarProcessor	access:public	signature:(Match *m, PElement e, Responder *, const string &)
process	./src/SubstituteProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SubstituteProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/SystemProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:SystemProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/TemplateProcessor.cpp	/^string TemplateProcessor::process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:TemplateProcessor	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/TemplateProcessor.h	/^    string process(Match *, PElement, Responder *, const string &);$/;"	p	class:TemplateProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
process	./src/ThatProcessor.h	/^    string process(Match *, PElement e, Responder *, const string &id)$/;"	f	class:ThatProcessor	access:public	signature:(Match *, PElement e, Responder *, const string &id)
process	./src/ThatstarProcessor.h	/^    string process(Match *m, PElement e, Responder *, const string &)$/;"	f	class:ThatstarProcessor	access:public	signature:(Match *m, PElement e, Responder *, const string &)
process	./src/ThinkProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:ThinkProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/TopicstarProcessor.h	/^    string process(Match *m, PElement e, Responder *, const string &)$/;"	f	class:TopicstarProcessor	access:public	signature:(Match *m, PElement e, Responder *, const string &)
process	./src/UppercaseProcessor.h	/^    string process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:UppercaseProcessor	access:public	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/VersionProcessor.h	/^    string process(Match *, PElement, Responder *, const string &)$/;"	f	class:VersionProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
process	./src/XmlSocketResponder.cpp	/^string XmlSocketProcessor::process(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:XmlSocketProcessor	signature:(Match *m, PElement e, Responder *r, const string &id)
process	./src/XmlSocketResponder.h	/^    string process(Match *, PElement, Responder *, const string &);$/;"	p	class:XmlSocketProcessor	access:public	signature:(Match *, PElement, Responder *, const string &)
processPending	./src/TimeKeeper.cpp	/^void Timer::processPending()$/;"	f	class:Timer	signature:()
processPending	./src/TimeKeeper.h	/^    void processPending();$/;"	p	class:Timer	access:public	signature:()
processTemplate	./src/TemplateProcessor.cpp	/^string TemplateProcessor::processTemplate(Match *m, PElement e, Responder *r, const string &id)$/;"	f	class:TemplateProcessor	signature:(Match *m, PElement e, Responder *r, const string &id)
processTemplate	./src/TemplateProcessor.h	/^    static string processTemplate(Match *, PElement, Responder *, const string &id);$/;"	p	class:TemplateProcessor	access:public	signature:(Match *, PElement, Responder *, const string &id)
processors	./src/Handler.cpp	/^map<string, AimlProcessor *> Handler::processors;$/;"	m	class:Handler	file:
processors	./src/Handler.h	/^    static map<string, AimlProcessor *> processors;$/;"	m	class:Handler	access:public
ptPort	./src/Config.h	/^    short	ptPort;$/;"	m	struct:__anon5	access:public
read	./src/Socket.cpp	/^int Socket::read(string &str)$/;"	f	class:Socket	signature:(string &str)
read	./src/Socket.h	/^    int read(bvector &vBuf, int nCount = 1048);$/;"	p	class:Socket	access:public	signature:(bvector &vBuf, int nCount = 1048)
read	./src/Socket.h	/^    int read(string &);$/;"	p	class:Socket	access:public	signature:(string &)
read	./src/wxwindows.h	/^    bool read;$/;"	m	class:UpdateTabEvent	access:public
read_raw	./src/Socket.cpp	/^int Socket::read_raw(void *buffer, int buf_size)$/;"	f	class:Socket	signature:(void *buffer, int buf_size)
read_raw	./src/Socket.h	/^    int read_raw(void *, int);$/;"	p	class:Socket	access:protected	signature:(void *, int)
recurse	./src/AimlWriter.cpp	/^string AimlWriter::recurse(PElement element)$/;"	f	class:AimlWriter	signature:(PElement element)
recurse	./src/AimlWriter.h	/^    static string recurse(PElement);$/;"	p	class:AimlWriter	access:public	signature:(PElement)
recurser	./src/Parser.h	/^    stack<PElement> recurser;$/;"	m	class:Parser	access:private
recursionDepth	./src/Kernel.cpp	/^static int recursionDepth = 0;$/;"	v	file:
recv	./src/HTTPProcessor.cpp	/^    void recv(string &s);$/;"	p	class:HTTPListener	file:	access:public	signature:(string &s)
recv	./src/HTTPProcessor.cpp	/^void HTTPListener::recv(string &s)$/;"	f	class:HTTPListener	signature:(string &s)
recv	./src/Socket.h	/^    virtual void recv(string &) = 0;$/;"	p	class:SocketListener	access:public	signature:(string &)
recv	./src/TokenProxyListener.cpp	/^void TokenProxyListener::recv(string &str)$/;"	f	class:TokenProxyListener	signature:(string &str)
recv	./src/TokenProxyListener.h	/^    void recv(string &);$/;"	p	class:TokenProxyListener	access:public	signature:(string &)
recv	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::recv(string &s)$/;"	f	class:XmlSocketResponder	signature:(string &s)
recv	./src/XmlSocketResponder.h	/^    void recv(string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(string &)
reeveSIGINT	./src/Main.cpp	/^void reeveSIGINT( int signum )$/;"	f	signature:( int signum )
reloadFile	./src/Template.cpp	/^void Template::reloadFile(int index)$/;"	f	class:Template	signature:(int index)
reloadFile	./src/Template.h	/^    static void reloadFile(int index);$/;"	p	class:Template	access:public	signature:(int index)
remove	./src/Utils.cpp	/^string remove(const string &text, char r)$/;"	f	signature:(const string &text, char r)
remove	./src/Utils.h	/^string remove(const string &, char);$/;"	p	signature:(const string &, char)
removeNewlines	./src/LearnProcessor.h	/^    string removeNewlines(const string &input)$/;"	f	class:LearnProcessor	access:private	signature:(const string &input)
removeSocket	./src/SocketHandler.cpp	/^void SocketHandler::removeSocket(string uid)$/;"	f	class:SocketHandler	signature:(string uid)
removeSocket	./src/SocketHandler.h	/^    static void removeSocket(string uid);$/;"	p	class:SocketHandler	access:public	signature:(string uid)
removeWS	./src/websocket.cpp	/^void WebSocketServer::removeWS(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
removeWS	./src/websocket.h	/^    static void removeWS(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
replace	./src/Substituter.cpp	/^string Substituter::replace(SubTree tree, const string &input)$/;"	f	class:Substituter	signature:(SubTree tree, const string &input)
replace	./src/Substituter.h	/^    static string replace(SubTree, const string &);$/;"	p	class:Substituter	access:public	signature:(SubTree, const string &)
replace	./src/Substituter.h	/^    string replace;$/;"	m	class:Node	access:public
replace	./src/Utils.cpp	/^string replace(const string &text, char a, char b)$/;"	f	signature:(const string &text, char a, char b)
replace	./src/Utils.h	/^string replace(const string &, char, char);$/;"	p	signature:(const string &, char, char)
replyHandshake	./src/websocket.cpp	/^bool WebSocketServer::replyHandshake(int sd, string webkey)$/;"	f	class:WebSocketServer	signature:(int sd, string webkey)
replyHandshake	./src/websocket.h	/^    static bool replyHandshake(int sd,string webkey);$/;"	p	class:WebSocketServer	access:public	signature:(int sd,string webkey)
reset	./src/StringTokenizer.h	/^    void reset()$/;"	f	class:StringTokenizer	access:public	signature:()
resolveEntities	./src/Element.cpp	/^string Element::resolveEntities(const string &input)$/;"	f	class:Element	signature:(const string &input)
resolveEntities	./src/Element.h	/^    static string resolveEntities(const string &);$/;"	p	class:Element	access:private	signature:(const string &)
respond	./src/FlashResponder.cpp	/^string FlashResponder::respond(Match *, PElement, const string &)$/;"	f	class:FlashResponder	signature:(Match *, PElement, const string &)
respond	./src/FlashResponder.h	/^    string respond(Match *, PElement, const string &);$/;"	p	class:FlashResponder	access:public	signature:(Match *, PElement, const string &)
respond	./src/HTTPProcessor.cpp	/^    string respond(Match *, PElement e, const string &)$/;"	f	class:HTTPListener	access:public	signature:(Match *, PElement e, const string &)
respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, Responder *r, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, Responder *r, bool srai, const string &prefix)
respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, Responder *r, int, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, Responder *r, int, bool srai, const string &prefix)
respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, bool srai, const string &prefix)
respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, const string &prefix)
respond	./src/Kernel.cpp	/^string Kernel::respond(const string &input, const string &id, int depth, bool srai, const string &prefix)$/;"	f	class:Kernel	signature:(const string &input, const string &id, int depth, bool srai, const string &prefix)
respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, Responder *, bool srai = false, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, Responder *, bool srai = false, const string &prefix = Ó)
respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, Responder *, int depth, bool srai, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, Responder *, int depth, bool srai, const string &prefix = Ó)
respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, bool srai, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, bool srai, const string &prefix = Ó)
respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, const string &prefix = Ó)
respond	./src/Kernel.h	/^    static string respond(const string &input, const string &id, int depth, bool srai, const string &prefix = "");$/;"	p	class:Kernel	access:public	signature:(const string &input, const string &id, int depth, bool srai, const string &prefix = Ó)
respond	./src/Responder.h	/^    virtual string respond(Match *, PElement, const string &) = 0;$/;"	p	class:Responder	access:public	signature:(Match *, PElement, const string &)
respond	./src/XmlSocketResponder.cpp	/^string XmlSocketResponder::respond(Match *, PElement, const string &)$/;"	f	class:XmlSocketResponder	signature:(Match *, PElement, const string &)
respond	./src/XmlSocketResponder.h	/^    string respond(Match *, PElement, const string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(Match *, PElement, const string &)
responder	./src/JavaScriptProcessor.h	/^    Responder *responder;$/;"	m	struct:__anon4	access:public
retTok	./src/StringTokenizer.h	/^    bool retTok;$/;"	m	class:StringTokenizer	access:private
rol	./src/sha1.cpp	/^inline const unsigned int rol(const unsigned int value,$/;"	f	namespace:sha1::__anon3	signature:(const unsigned int value, const unsigned int steps)
root	./src/Kernel.cpp	/^Nodemaster *Kernel::root = new Nodemaster();$/;"	m	class:Kernel	file:
root	./src/Kernel.h	/^    static Nodemaster *root;$/;"	m	class:Kernel	access:private
root	./src/Parser.h	/^    PElement current, root;$/;"	m	class:Parser	access:private
root	./src/Substituter.h	/^    Node *root;$/;"	m	class:SubTree	access:public
run	./src/Main.cpp	/^void run();$/;"	p	file:	signature:()
run	./src/TimeKeeper.h	/^    virtual void run() = 0;$/;"	p	class:Event	access:public	signature:()
run	./src/TimeKeeper.h	/^    void run()$/;"	f	class:TimedEvent	access:public	signature:()
runLoop	./src/SocketHandler.cpp	/^void SocketHandler::runLoop()$/;"	f	class:SocketHandler	signature:()
runLoop	./src/SocketHandler.h	/^    static void runLoop();$/;"	p	class:SocketHandler	access:public	signature:()
run_reeve	./src/Main.cpp	/^void run_reeve()$/;"	f	signature:()
run_reeve	./src/Main.h	/^void run_reeve();$/;"	p	signature:()
runtime	./src/JavaScriptProcessor.h	/^    JSRuntime *runtime;$/;"	m	class:JavaScriptProcessor	access:private
sd	./src/Socket.h	/^    int sd, port;$/;"	m	class:Socket	access:protected
send	./src/XmlSocketResponder.cpp	/^void XmlSocketResponder::send(const string &s)$/;"	f	class:XmlSocketResponder	signature:(const string &s)
send	./src/XmlSocketResponder.h	/^    void send(const string &);$/;"	p	class:XmlSocketResponder	access:public	signature:(const string &)
sendMessage	./src/websocket.cpp	/^void WebSocketServer::sendMessage(int sd, string msg)$/;"	f	class:WebSocketServer	signature:(int sd, string msg)
sendMessage	./src/websocket.h	/^    static void sendMessage(int sd, string msg);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, string msg)
sendToAll	./src/websocket.cpp	/^void WebSocketServer::sendToAll(int sd, const char message[1024])$/;"	f	class:WebSocketServer	signature:(int sd, const char message[1024])
sendToAll	./src/websocket.h	/^    static void sendToAll(int sd, const char message[1024]);$/;"	p	class:WebSocketServer	access:public	signature:(int sd, const char message[1024])
separator	./src/TokenProxyListener.h	/^    string separator, buffer;$/;"	m	class:TokenProxyListener	access:private
server	./src/HTTPProcessor.h	/^    ServerSocket *server;$/;"	m	class:HTTPServer	access:private
server	./src/XmlSocketResponder.h	/^    ServerSocket *server;$/;"	m	class:XmlSocketProcessor	access:private
serverListener	./src/ServerSocket.h	/^    ServerSocketListener *serverListener;$/;"	m	class:ServerSocket	access:protected
serverRunning	./src/Main.cpp	/^bool	serverRunning		= true;$/;"	v
setAttribute	./src/Element.cpp	/^void Element::setAttribute(const string &key, const string &value)$/;"	f	class:Element	signature:(const string &key, const string &value)
setAttribute	./src/Element.h	/^    void setAttribute(const string &, const string &);$/;"	p	class:Element	access:public	signature:(const string &, const string &)
setConnected	./src/websocket.cpp	/^bool WebSocketServer::setConnected(int sd)$/;"	f	class:WebSocketServer	signature:(int sd)
setConnected	./src/websocket.h	/^    static bool setConnected(int sd);$/;"	p	class:WebSocketServer	access:public	signature:(int sd)
setContextPattern	./src/Match.cpp	/^void Match::setContextPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
setContextPattern	./src/Match.h	/^    void setContextPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
setInputPattern	./src/Match.cpp	/^void Match::setInputPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
setInputPattern	./src/Match.h	/^    void setInputPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
setListener	./src/Socket.cpp	/^void Socket::setListener(SocketListener *listener)$/;"	f	class:Socket	signature:(SocketListener *listener)
setListener	./src/Socket.h	/^    void setListener(SocketListener *);$/;"	p	class:Socket	access:public	signature:(SocketListener *)
setName	./src/Element.cpp	/^void Element::setName(const string &str)$/;"	f	class:Element	signature:(const string &str)
setName	./src/Element.h	/^    void setName(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
setName	./src/wxwindows.h	/^    void setName(const string &s)$/;"	f	class:GuiStream	access:public	signature:(const string &s)
setNamespace	./src/Element.cpp	/^void Element::setNamespace(const string &str)$/;"	f	class:Element	signature:(const string &str)
setNamespace	./src/Element.h	/^    void setNamespace(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
setNode	./src/Match.cpp	/^void Match::setNode(Nodemaster *n)$/;"	f	class:Match	signature:(Nodemaster *n)
setNode	./src/Match.h	/^    void setNode(Nodemaster *n);$/;"	p	class:Match	access:public	signature:(Nodemaster *n)
setPath	./src/Match.cpp	/^void Match::setPath(const string &s)$/;"	f	class:Match	signature:(const string &s)
setPath	./src/Match.h	/^    void setPath(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
setServerListener	./src/ServerSocket.cpp	/^void ServerSocket::setServerListener(ServerSocketListener *serverListener)$/;"	f	class:ServerSocket	signature:(ServerSocketListener *serverListener)
setServerListener	./src/ServerSocket.h	/^    void setServerListener(ServerSocketListener *);$/;"	p	class:ServerSocket	access:public	signature:(ServerSocketListener *)
setStreamProvider	./src/Stream.cpp	/^void setStreamProvider($/;"	f	signature:( StreamProvider *newStreamProvider)
setStreamProvider	./src/Stream.h	/^void setStreamProvider(StreamProvider *streamProvider);$/;"	p	signature:(StreamProvider *streamProvider)
setTagname	./src/Element.cpp	/^void Element::setTagname(const string &str)$/;"	f	class:Element	signature:(const string &str)
setTagname	./src/Element.h	/^    void setTagname(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
setText	./src/Element.cpp	/^void Element::setText(const string &str)$/;"	f	class:Element	signature:(const string &str)
setText	./src/Element.h	/^    void setText(const string &);$/;"	p	class:Element	access:public	signature:(const string &)
setThatPattern	./src/Match.cpp	/^void Match::setThatPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
setThatPattern	./src/Match.h	/^    void setThatPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
setThread	./src/wxwindows.h	/^    void setThread(wxThread *t)$/;"	f	class:GuiStream	access:public	signature:(wxThread *t)
setTopicPattern	./src/Match.cpp	/^void Match::setTopicPattern(const string &s)$/;"	f	class:Match	signature:(const string &s)
setTopicPattern	./src/Match.h	/^    void setTopicPattern(const string &s);$/;"	p	class:Match	access:public	signature:(const string &s)
setValue	./src/PredicateEngine.cpp	/^void PredicateEngine::setValue(const string &property, const string &id, const string &value, int index)$/;"	f	class:PredicateEngine	signature:(const string &property, const string &id, const string &value, int index)
setValue	./src/PredicateEngine.h	/^    void setValue(const string &property, const string &id, const string &value, int index = 1);$/;"	p	class:PredicateEngine	access:public	signature:(const string &property, const string &id, const string &value, int index = 1)
set_non_block	./src/ServerSocket.cpp	/^bool set_non_block(int socket)$/;"	f	signature:(int socket)
set_non_block	./src/ServerSocket.cpp	/^static bool set_non_block(int);$/;"	p	file:	signature:(int)
sh	./src/Utils.cpp	/^static cstr_hashset sh;$/;"	v	file:
sha1	./src/sha1.cpp	/^namespace sha1$/;"	n	file:
sha1	./src/sha1.h	/^namespace sha1$/;"	n
sha1::__anon3::clearWBuffert	./src/sha1.cpp	/^inline void clearWBuffert(unsigned int* buffert)$/;"	f	namespace:sha1::__anon3	signature:(unsigned int* buffert)
sha1::__anon3::innerHash	./src/sha1.cpp	/^void innerHash(unsigned int* result, unsigned int* w)$/;"	f	namespace:sha1::__anon3	signature:(unsigned int* result, unsigned int* w)
sha1::__anon3::rol	./src/sha1.cpp	/^inline const unsigned int rol(const unsigned int value,$/;"	f	namespace:sha1::__anon3	signature:(const unsigned int value, const unsigned int steps)
sha1::calc	./src/sha1.cpp	/^void calc(const void* src, const int bytelength, unsigned char* hash)$/;"	f	namespace:sha1	signature:(const void* src, const int bytelength, unsigned char* hash)
sha1::calc	./src/sha1.h	/^void calc(const void* src, const int bytelength, unsigned char* hash);$/;"	p	namespace:sha1	signature:(const void* src, const int bytelength, unsigned char* hash)
sha1::toHexString	./src/sha1.cpp	/^void toHexString(const unsigned char* hash, char* hexstring)$/;"	f	namespace:sha1	signature:(const unsigned char* hash, char* hexstring)
sha1::toHexString	./src/sha1.h	/^void toHexString(const unsigned char* hash, char* hexstring);$/;"	p	namespace:sha1	signature:(const unsigned char* hash, char* hexstring)
sha1macro	./src/sha1.cpp	34;"	d	file:
sha1macro	./src/sha1.cpp	74;"	d	file:
shutdown	./src/HTTPProcessor.cpp	/^void HTTPServer::shutdown(const string &msg)$/;"	f	class:HTTPServer	signature:(const string &msg)
shutdown	./src/HTTPProcessor.h	/^    void shutdown(const string &);$/;"	p	class:HTTPServer	access:public	signature:(const string &)
shutdown	./src/ServerSocket.h	/^    virtual void shutdown(const string &) = 0;$/;"	p	class:ServerSocketListener	access:public	signature:(const string &)
shutdown	./src/XmlSocketResponder.cpp	/^void XmlSocketProcessor::shutdown(const string &msg)$/;"	f	class:XmlSocketProcessor	signature:(const string &msg)
shutdown	./src/XmlSocketResponder.h	/^    void shutdown(const string &);$/;"	p	class:XmlSocketProcessor	access:public	signature:(const string &)
signalHandler	./src/Main.cpp	/^void signalHandler( int signum )$/;"	f	signature:( int signum )
size	./src/PredicateEngine.h	/^    int size;$/;"	m	struct:__anon1	access:public
size	./src/PredicateEngine.h	/^    int size;$/;"	m	struct:__anon2	access:public
size	./src/wxwindows.h	/^    int size;$/;"	m	class:NewTabEvent	access:public
skipDelimiters	./src/StringTokenizer.cpp	/^void StringTokenizer::skipDelimiters()$/;"	f	class:StringTokenizer	signature:()
skipDelimiters	./src/StringTokenizer.h	/^    void skipDelimiters();$/;"	p	class:StringTokenizer	access:private	signature:()
sockets	./src/SocketHandler.cpp	/^map<string, Socket *> SocketHandler::sockets;$/;"	m	class:SocketHandler	file:
sockets	./src/SocketHandler.h	/^    static map<string, Socket *> sockets;$/;"	m	class:SocketHandler	access:private
socklen_t	./src/Compat.h	/^typedef int FAR socklen_t;$/;"	t
socklen_t	./src/Compat.h	/^typedef int socklen_t;$/;"	t
ss	./src/Utils.cpp	/^static str_set ss;$/;"	v	file:
start	./src/Template.h	/^    streamsize start, end;$/;"	m	class:Template	access:private
startupPattern	./src/Config.h	/^    string	startupPattern;$/;"	m	struct:__anon5	access:public
startupPattern	./src/Config.h	/^    string	startupPattern;$/;"	m	struct:__anon6	access:public
startupPattern	./src/Config.h	/^    string	startupPattern;$/;"	m	struct:__anon7	access:public
str	./src/StringTokenizer.h	/^    string str;$/;"	m	class:StringTokenizer	access:private
str_set	./src/Utils.cpp	/^typedef set<string> str_set;$/;"	t	file:
streamProvider	./src/Stream.cpp	/^static StreamProvider* streamProvider = NULL;$/;"	v	file:
streams	./src/wxwindows.h	/^    map<string, GuiStream *> streams;$/;"	m	class:JThread	access:private
substitute	./src/Substituter.cpp	/^string Substituter::substitute(const string &input, const string &subs)$/;"	f	class:Substituter	signature:(const string &input, const string &subs)
substitute	./src/Substituter.h	/^    static string substitute(const string &, const string &subs = "normal");$/;"	p	class:Substituter	access:public	signature:(const string &, const string &subs = Ó)
substituters	./src/Substituter.h	/^    static map<string, SubTree> substituters;$/;"	m	class:Substituter	access:public
tComp	./src/TimeKeeper.h	/^struct tComp$/;"	s
tComp::operator ()	./src/TimeKeeper.h	/^    bool operator() (const TimedEvent *lhs, const TimedEvent *rhs)$/;"	f	struct:tComp	access:public	signature:(const TimedEvent *lhs, const TimedEvent *rhs)
tDay	./src/TimeKeeper.cpp	/^long tDay()$/;"	f	signature:()
tDay	./src/TimeKeeper.h	/^extern long tDay();$/;"	p	signature:()
tHour	./src/TimeKeeper.cpp	/^long tHour()$/;"	f	signature:()
tHour	./src/TimeKeeper.h	/^extern long tHour();$/;"	p	signature:()
tMinute	./src/TimeKeeper.cpp	/^long tMinute()$/;"	f	signature:()
tMinute	./src/TimeKeeper.h	/^extern long tMinute();$/;"	p	signature:()
tNow	./src/TimeKeeper.cpp	/^long tNow()$/;"	f	signature:()
tNow	./src/TimeKeeper.h	/^extern long tNow();$/;"	p	signature:()
tSecond	./src/TimeKeeper.cpp	/^long tSecond()$/;"	f	signature:()
tSecond	./src/TimeKeeper.h	/^extern long tSecond();$/;"	p	signature:()
tWeek	./src/TimeKeeper.cpp	/^long tWeek()$/;"	f	signature:()
tWeek	./src/TimeKeeper.h	/^extern long tWeek();$/;"	p	signature:()
tail	./src/StringTokenizer.h	/^    string tail()$/;"	f	class:StringTokenizer	access:public	signature:()
templateBegin	./src/PreParser.h	/^    int templateBegin;$/;"	m	class:PreParser	access:private
templateDepth	./src/PreParser.cpp	/^int templateDepth = 0;$/;"	v
templateFile	./src/Config.h	/^    string	templateFile;$/;"	m	struct:__anon6	access:public
templateString	./src/Kernel.cpp	/^string templateString(PElement element)$/;"	f	signature:(PElement element)
templateString	./src/Kernel.cpp	/^string templateString(PElement);$/;"	p	file:	signature:(PElement)
templates	./src/Nodemaster.h	/^    Template *templates;$/;"	m	class:Nodemaster	access:private
test	./src/websocket.cpp	/^bool WebSocketServer::test(){$/;"	f	class:WebSocketServer	signature:()
test	./src/websocket.h	/^    static bool test();$/;"	p	class:WebSocketServer	access:public	signature:()
text	./src/Element.h	/^    string text;$/;"	m	class:Element	access:private
text	./src/wxwindows.h	/^    string name, text;$/;"	m	class:UpdateTabEvent	access:public
that	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
thatPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
thatStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
thread	./src/wxwindows.h	/^    wxThread *thread;$/;"	m	class:GuiStream	access:private
time	./src/TimeKeeper.h	/^    long time;$/;"	m	class:TimedEvent	access:private
timerMillis	./src/Utils.cpp	/^long timerMillis()$/;"	f	signature:()
timerMillis	./src/Utils.h	/^long timerMillis();$/;"	p	signature:()
timestamp	./src/Logger.cpp	/^string Logger::timestamp()$/;"	f	class:Logger	signature:()
timestamp	./src/Logger.h	/^    static string timestamp();$/;"	p	class:Logger	access:public	signature:()
timingResponse	./src/Kernel.cpp	/^static long timingResponse = 0;$/;"	v	file:
tname	./src/Element.h	/^    char *tname, *nspace;$/;"	m	class:Element	access:private
toHexString	./src/sha1.cpp	/^void toHexString(const unsigned char* hash, char* hexstring)$/;"	f	namespace:sha1	signature:(const unsigned char* hash, char* hexstring)
toHexString	./src/sha1.h	/^void toHexString(const unsigned char* hash, char* hexstring);$/;"	p	namespace:sha1	signature:(const unsigned char* hash, char* hexstring)
toLower	./src/Utils.cpp	/^string toLower(const string &text)$/;"	f	signature:(const string &text)
toLower	./src/Utils.h	/^string toLower(const string &);$/;"	p	signature:(const string &)
toString	./src/Kernel.cpp	/^string toString(PElement element)$/;"	f	signature:(PElement element)
toString	./src/Kernel.cpp	/^string toString(PElement);$/;"	p	file:	signature:(PElement)
toUpper	./src/Utils.cpp	/^string toUpper(const string &text)$/;"	f	signature:(const string &text)
toUpper	./src/Utils.h	/^string toUpper(const string &);$/;"	p	signature:(const string &)
top	./src/PredicateEngine.h	/^    int top;$/;"	m	struct:__anon1	access:public
topic	./src/PreParser.h	/^    string pattern, topic, that, currentTag, filename;$/;"	m	class:PreParser	access:private
topicPattern	./src/Match.h	/^    string contextPattern, inputPattern, thatPattern, topicPattern;$/;"	m	class:Match	access:private
topicStar	./src/Match.h	/^    vector<string> contextStar, inputStar, thatStar, topicStar;$/;"	m	class:Match	access:private
totalCategories	./src/Kernel.cpp	/^int totalCategories = 0;$/;"	v
totalNodes	./src/Kernel.cpp	/^long totalNodes = 0;$/;"	v
totalSize	./src/Kernel.cpp	/^long totalSize = 0;$/;"	v
totalTime	./src/Main.cpp	/^long totalTime = 0;$/;"	v
tq	./src/TimeKeeper.h	/^    TimeQueue tq;$/;"	m	class:Timer	access:private
trace	./src/Main.cpp	/^bool	trace				= false;$/;"	v
trim	./src/Utils.cpp	/^string trim(const string &text)$/;"	f	signature:(const string &text)
trim	./src/Utils.cpp	/^string trim(const string &text, const string &remove)$/;"	f	signature:(const string &text, const string &remove)
trim	./src/Utils.h	/^string trim(const string &);$/;"	p	signature:(const string &)
trim	./src/Utils.h	/^string trim(const string &, const string &);$/;"	p	signature:(const string &, const string &)
trimming	./src/Kernel.cpp	/^static bool trimming = true;$/;"	v	file:
uArrayMap	./src/PredicateEngine.h	/^typedef map<pair<string, string>, ARRAY> uArrayMap;$/;"	t
uid	./src/HTTPProcessor.cpp	/^    string uid;$/;"	m	class:HTTPListener	file:	access:private
unbind	./src/Pointer.h	/^    void unbind()$/;"	f	class:Pointer	access:protected	signature:()
urldecode	./src/Utils.cpp	/^string urldecode(const string &in)$/;"	f	signature:(const string &in)
urldecode	./src/Utils.h	/^string urldecode(const string &);$/;"	p	signature:(const string &)
urlencode	./src/Utils.cpp	/^string urlencode(const string &in)$/;"	f	signature:(const string &in)
urlencode	./src/Utils.h	/^string urlencode(const string &);$/;"	p	signature:(const string &)
userPredicates	./src/PredicateEngine.h	/^    uArrayMap userPredicates;$/;"	m	class:PredicateEngine	access:private
username	./src/Config.h	/^    string	username;$/;"	m	struct:__anon8	access:public
users	./src/SecureProcessor.h	/^static vector<string> users;$/;"	v
value	./src/Pointer.h	/^    Holder *value;$/;"	m	class:Pointer	access:protected
vecPair	./src/NodeWalker.cpp	/^typedef pair<char *, Nodemaster *> vecPair;$/;"	t	file:
velement	./src/Element.h	/^typedef list<PElement> velement;$/;"	t
velement_it	./src/Element.h	/^typedef list<PElement>::iterator velement_it;$/;"	t
walkingVec	./src/NodeWalker.cpp	/^typedef vector<vecPair> walkingVec;$/;"	t	file:
websocks	./src/websocket.cpp	/^map<int,string> WebSocketServer::websocks;$/;"	m	class:WebSocketServer	file:
websocks	./src/websocket.h	/^    static map<int,string> websocks;$/;"	m	class:WebSocketServer	access:public
win32_cleanup_sockets	./src/Socket.cpp	/^    void win32_cleanup_sockets(void)$/;"	f	signature:(void)
win32_cleanup_sockets	./src/Socket.cpp	/^    void win32_cleanup_sockets(void);$/;"	p	file:	signature:(void)
win32_init_sockets	./src/Socket.cpp	/^    void win32_init_sockets(void)$/;"	f	signature:(void)
win32_init_sockets	./src/Socket.cpp	/^    void win32_init_sockets(void);$/;"	p	file:	signature:(void)
write	./src/Socket.cpp	/^int Socket::write(const string &str, bool appendNullByte)$/;"	f	class:Socket	signature:(const string &str, bool appendNullByte)
write	./src/Socket.h	/^    int write(bvector &vBuf, int nStart = 0, int nCount = 0);$/;"	p	class:Socket	access:public	signature:(bvector &vBuf, int nStart = 0, int nCount = 0)
write	./src/Socket.h	/^    int write(const string &, bool appendNullByte = false);$/;"	p	class:Socket	access:public	signature:(const string &, bool appendNullByte = false)
write_raw	./src/Socket.cpp	/^int Socket::write_raw(const void *data, int len)$/;"	f	class:Socket	signature:(const void *data, int len)
write_raw	./src/Socket.h	/^    int write_raw(const void *, int);$/;"	p	class:Socket	access:protected	signature:(const void *, int)
~AimlProcessor	./src/AimlProcessor.h	/^    virtual ~AimlProcessor() { };$/;"	f	class:AimlProcessor	access:public	signature:()
~AuthenticateProcessor	./src/SecureProcessor.h	/^    ~AuthenticateProcessor() { }$/;"	f	class:AuthenticateProcessor	access:public	signature:()
~BotProcessor	./src/BotProcessor.h	/^    ~BotProcessor() { }$/;"	f	class:BotProcessor	access:public	signature:()
~BrProcessor	./src/BrProcessor.h	/^    ~BrProcessor() { }$/;"	f	class:BrProcessor	access:public	signature:()
~ConditionProcessor	./src/ConditionProcessor.h	/^    ~ConditionProcessor() { }$/;"	f	class:ConditionProcessor	access:public	signature:()
~Element	./src/Element.cpp	/^Element::~Element()$/;"	f	class:Element	signature:()
~Element	./src/Element.h	/^    ~Element();$/;"	p	class:Element	access:public	signature:()
~Event	./src/TimeKeeper.h	/^    virtual ~Event() { }$/;"	f	class:Event	access:public	signature:()
~FormalProcessor	./src/FormalProcessor.h	/^    ~FormalProcessor() { }$/;"	f	class:FormalProcessor	access:public	signature:()
~GenderProcessor	./src/PersonProcessor.h	/^    ~GenderProcessor() { }$/;"	f	class:GenderProcessor	access:public	signature:()
~GetProcessor	./src/GetProcessor.h	/^    ~GetProcessor() { }$/;"	f	class:GetProcessor	access:public	signature:()
~HTTPListener	./src/HTTPProcessor.cpp	/^    virtual ~HTTPListener()$/;"	f	class:HTTPListener	access:public	signature:()
~HTTPServer	./src/HTTPProcessor.h	/^    virtual ~HTTPServer() { }$/;"	f	class:HTTPServer	access:public	signature:()
~Holder	./src/Pointer.h	/^        ~Holder()$/;"	f	class:Pointer::Holder	access:public	signature:()
~IdProcessor	./src/IdProcessor.h	/^    ~IdProcessor() { }$/;"	f	class:IdProcessor	access:public	signature:()
~InputProcessor	./src/InputProcessor.h	/^    ~InputProcessor() { }$/;"	f	class:InputProcessor	access:public	signature:()
~JavaScriptProcessor	./src/JavaScriptProcessor.h	/^    ~JavaScriptProcessor()$/;"	f	class:JavaScriptProcessor	access:public	signature:()
~Kernel	./src/Kernel.cpp	/^Kernel::~Kernel()$/;"	f	class:Kernel	signature:()
~Kernel	./src/Kernel.h	/^    ~Kernel();$/;"	p	class:Kernel	access:public	signature:()
~LearnProcessor	./src/LearnProcessor.h	/^    ~LearnProcessor()$/;"	f	class:LearnProcessor	access:public	signature:()
~Logger	./src/Logger.h	/^    ~Logger()$/;"	f	class:Logger	access:public	signature:()
~LowercaseProcessor	./src/LowercaseProcessor.h	/^    ~LowercaseProcessor() { }$/;"	f	class:LowercaseProcessor	access:public	signature:()
~NameProcessor	./src/NameProcessor.h	/^    ~NameProcessor() { }$/;"	f	class:NameProcessor	access:public	signature:()
~Nodemapper	./src/Nodemapper.h	/^    virtual ~Nodemapper() { }$/;"	f	class:Nodemapper	access:public	signature:()
~Nodemaster	./src/Nodemaster.h	/^    ~Nodemaster() { }$/;"	f	class:Nodemaster	access:public	signature:()
~NormalizeProcessor	./src/NormalizeProcessor.h	/^    ~NormalizeProcessor() { }$/;"	f	class:NormalizeProcessor	access:public	signature:()
~Person2Processor	./src/PersonProcessor.h	/^    ~Person2Processor() { }$/;"	f	class:Person2Processor	access:public	signature:()
~PersonProcessor	./src/PersonProcessor.h	/^    ~PersonProcessor() { }$/;"	f	class:PersonProcessor	access:public	signature:()
~Pointer	./src/Pointer.h	/^    ~Pointer()$/;"	f	class:Pointer	access:public	signature:()
~PreParser	./src/PreParser.h	/^    virtual ~PreParser()$/;"	f	class:PreParser	access:public	signature:()
~PredicateEngine	./src/PredicateEngine.cpp	/^PredicateEngine::~PredicateEngine()$/;"	f	class:PredicateEngine	signature:()
~PredicateEngine	./src/PredicateEngine.h	/^    ~PredicateEngine();	\/\/	This will save the predicates$/;"	p	class:PredicateEngine	access:public	signature:()
~RandomProcessor	./src/RandomProcessor.h	/^    ~RandomProcessor() { }$/;"	f	class:RandomProcessor	access:public	signature:()
~Responder	./src/Responder.h	/^    virtual ~Responder() { };$/;"	f	class:Responder	access:public	signature:()
~SaxListener	./src/SaxParser.h	/^    virtual ~SaxListener()$/;"	f	class:SaxListener	access:public	signature:()
~SaxParser	./src/SaxParser.h	/^    ~SaxParser()$/;"	f	class:SaxParser	access:public	signature:()
~SecureProcessor	./src/SecureProcessor.h	/^    ~SecureProcessor() { }$/;"	f	class:SecureProcessor	access:public	signature:()
~SentenceProcessor	./src/SentenceProcessor.h	/^    ~SentenceProcessor() { }$/;"	f	class:SentenceProcessor	access:public	signature:()
~ServerSocket	./src/ServerSocket.cpp	/^ServerSocket::~ServerSocket()$/;"	f	class:ServerSocket	signature:()
~ServerSocket	./src/ServerSocket.h	/^    virtual ~ServerSocket();$/;"	p	class:ServerSocket	access:public	signature:()
~SetProcessor	./src/SetProcessor.h	/^    ~SetProcessor() { }$/;"	f	class:SetProcessor	access:public	signature:()
~Socket	./src/Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
~Socket	./src/Socket.h	/^    virtual ~Socket();$/;"	p	class:Socket	access:public	signature:()
~SrProcessor	./src/SrProcessor.h	/^    ~SrProcessor() { }$/;"	f	class:SrProcessor	access:public	signature:()
~SraiProcessor	./src/SraiProcessor.h	/^    ~SraiProcessor() { }$/;"	f	class:SraiProcessor	access:public	signature:()
~StarProcessor	./src/StarProcessor.h	/^    ~StarProcessor() { }$/;"	f	class:StarProcessor	access:public	signature:()
~SubstituteProcessor	./src/SubstituteProcessor.h	/^    ~SubstituteProcessor() { }$/;"	f	class:SubstituteProcessor	access:public	signature:()
~TemplateProcessor	./src/TemplateProcessor.cpp	/^TemplateProcessor::~TemplateProcessor()$/;"	f	class:TemplateProcessor	signature:()
~TemplateProcessor	./src/TemplateProcessor.h	/^    ~TemplateProcessor();$/;"	p	class:TemplateProcessor	access:public	signature:()
~ThatProcessor	./src/ThatProcessor.h	/^    ~ThatProcessor() { }$/;"	f	class:ThatProcessor	access:public	signature:()
~ThatstarProcessor	./src/ThatstarProcessor.h	/^    ~ThatstarProcessor() { }$/;"	f	class:ThatstarProcessor	access:public	signature:()
~ThinkProcessor	./src/ThinkProcessor.h	/^    ~ThinkProcessor() { }$/;"	f	class:ThinkProcessor	access:public	signature:()
~TokenProxyListener	./src/TokenProxyListener.h	/^    virtual ~TokenProxyListener() { }$/;"	f	class:TokenProxyListener	access:public	signature:()
~TopicstarProcessor	./src/TopicstarProcessor.h	/^    ~TopicstarProcessor() { }$/;"	f	class:TopicstarProcessor	access:public	signature:()
~UppercaseProcessor	./src/UppercaseProcessor.h	/^    ~UppercaseProcessor() { }$/;"	f	class:UppercaseProcessor	access:public	signature:()
~VersionProcessor	./src/VersionProcessor.h	/^    ~VersionProcessor() { }$/;"	f	class:VersionProcessor	access:public	signature:()
~XmlSocketProcessor	./src/XmlSocketResponder.h	/^    virtual ~XmlSocketProcessor() { }$/;"	f	class:XmlSocketProcessor	access:public	signature:()
~XmlSocketResponder	./src/XmlSocketResponder.h	/^    virtual ~XmlSocketResponder()$/;"	f	class:XmlSocketResponder	access:public	signature:()
